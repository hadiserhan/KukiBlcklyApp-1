// Do not edit this file; automatically generated by build.py.
"use strict";

"use strict"; /*

 Visual Blocks Editor

 Copyright 2016 Massachusetts Institute of Technology
 All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
Blockly.Colours = {
  motion: { primary: "#4C97FF", secondary: "#4280D7", tertiary: "#3373CC" },
  drive: { primary: "#4C97FF", secondary: "#4280D7", tertiary: "#3373CC" },
  looks: { primary: "#9966FF", secondary: "#855CD6", tertiary: "#774DCB" },
  LEDs: { primary: "#9966FF", secondary: "#855CD6", tertiary: "#774DCB" },
  sounds: { primary: "#CF63CF", secondary: "#C94FC9", tertiary: "#BD42BD" },
  control: { primary: "#FFAB19", secondary: "#EC9C13", tertiary: "#CF8B17" },
  event: { primary: "#FFBF00", secondary: "#E6AC00", tertiary: "#CC9900" },
  sensing: { primary: "#5CB1D6", secondary: "#47A8D1", tertiary: "#2E8EB8" },
  pen: { primary: "#0fBD8C", secondary: "#0DA57A", tertiary: "#0B8E69" },
  advanced: { primary: "#bd0f40", secondary: "#a50d38", tertiary: "#8e0b30" },
  operators: { primary: "#59C059", secondary: "#46B946", tertiary: "#389438" },
  data: { primary: "#FF8C1A", secondary: "#FF8000", tertiary: "#DB6E00" },
  data_lists: { primary: "#FF661A", secondary: "#FF5500", tertiary: "#E64D00" },
  more: { primary: "#FF6680", secondary: "#FF4D6A", tertiary: "#FF3355" },
  comment: { primary: "#FF6680", secondary: "#FF4D6A", tertiary: "#FF3355" },
  functions: { primary: "#FF6E4F", secondary: "#FF5C39", tertiary: "#E65334" },
  highlightGlow: "#FFF200",
  highlightGlowSize: 1.1,
  highlightGlowOpacity: 1,
  selectedGlow: "#FFF200",
  selectedGlowSize: 0.4,
  warningGlow: "#E53D00",
  warningGlowSize: 1.1,
  warningGlowOpacity: 1,
  canvasTransitionLength: 500,
  text: "#575E75",
  workspace: "#F9F9F9",
  toolboxHover: "#4C97FF",
  toolboxSelected: "#e9eef2",
  toolboxText: "#575E75",
  toolbox: "#FFFFFF",
  flyout: "#a5d4ea",
  scrollbar: "#CECDCE",
  scrollbarHover: "#CECDCE",
  textField: "#FFFFFF",
  insertionMarker: "#000000",
  insertionMarkerOpacity: 0.2,
  dragShadowOpacity: 0.3,
  stackGlow: "#FFF200",
  stackGlowSize: 4,
  stackGlowOpacity: 1,
  replacementGlow: "#FFFFFF",
  replacementGlowSize: 2,
  replacementGlowOpacity: 1,
  colourPickerStroke: "#FFFFFF",
  fieldShadow: "rgba(255, 255, 255, 0.2)",
  dropDownShadow: "rgba(0, 0, 0, .3)",
  numPadBackground: "#547AB2",
  numPadBorder: "#435F91",
  numPadActiveBackground: "#435F91",
  numPadText: "white",
  valueReportBackground: "#FFFFFF",
  valueReportBorder: "#AAAAAA",
};
Blockly.Colours.overrideColours = function (a) {
  if (a)
    for (var b in a)
      if (a.hasOwnProperty(b) && Blockly.Colours.hasOwnProperty(b)) {
        var c = a[b];
        if (goog.isObject(c))
          for (var d in c)
            c.hasOwnProperty(d) &&
              Blockly.Colours[b].hasOwnProperty(d) &&
              (Blockly.Colours[b][d] = c[d]);
        else Blockly.Colours[b] = c;
      }
};
Blockly.constants = {};
Blockly.DRAG_RADIUS = 3;
Blockly.FLYOUT_DRAG_RADIUS = 10;
Blockly.SNAP_RADIUS = 48;
Blockly.CONNECTING_SNAP_RADIUS = 68;
Blockly.CURRENT_CONNECTION_PREFERENCE = 20;
Blockly.BUMP_DELAY = 0;
Blockly.COLLAPSE_CHARS = 30;
Blockly.LONGPRESS = 750;
Blockly.LINE_SCROLL_MULTIPLIER = 15;
Blockly.SOUND_LIMIT = 100;
Blockly.DRAG_STACK = !0;
Blockly.HSV_SATURATION = 0.45;
Blockly.HSV_VALUE = 0.65;
Blockly.SPRITE = { width: 96, height: 124, url: "sprites.png" };
Blockly.SVG_NS = "http://www.w3.org/2000/svg";
Blockly.HTML_NS = "http://www.w3.org/1999/xhtml";
Blockly.INPUT_VALUE = 1;
Blockly.OUTPUT_VALUE = 2;
Blockly.NEXT_STATEMENT = 3;
Blockly.PREVIOUS_STATEMENT = 4;
Blockly.DUMMY_INPUT = 5;
Blockly.ALIGN_LEFT = -1;
Blockly.ALIGN_CENTRE = 0;
Blockly.ALIGN_RIGHT = 1;
Blockly.DRAG_NONE = 0;
Blockly.DRAG_STICKY = 1;
Blockly.DRAG_BEGIN = 1;
Blockly.DRAG_FREE = 2;
Blockly.OPPOSITE_TYPE = [];
Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE] = Blockly.OUTPUT_VALUE;
Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE] = Blockly.INPUT_VALUE;
Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT] = Blockly.PREVIOUS_STATEMENT;
Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT] = Blockly.NEXT_STATEMENT;
Blockly.TOOLBOX_AT_TOP = 0;
Blockly.TOOLBOX_AT_BOTTOM = 1;
Blockly.TOOLBOX_AT_LEFT = 2;
Blockly.TOOLBOX_AT_RIGHT = 3;
Blockly.OUTPUT_SHAPE_HEXAGONAL = 1;
Blockly.OUTPUT_SHAPE_ROUND = 2;
Blockly.OUTPUT_SHAPE_SQUARE = 3;
Blockly.Categories = {
  motion: "motion",
  looks: "looks",
  sound: "sounds",
  pen: "pen",
  data: "data",
  dataLists: "data-lists",
  event: "events",
  control: "control",
  sensing: "sensing",
  operators: "operators",
  more: "more",
};
Blockly.DELETE_AREA_NONE = null;
Blockly.DELETE_AREA_TRASH = 1;
Blockly.DELETE_AREA_TOOLBOX = 2;
Blockly.VARIABLE_CATEGORY_NAME = "VARIABLE";
Blockly.PROCEDURE_CATEGORY_NAME = "PROCEDURE";
Blockly.RENAME_VARIABLE_ID = "RENAME_VARIABLE_ID";
Blockly.DELETE_VARIABLE_ID = "DELETE_VARIABLE_ID";
Blockly.NEW_BROADCAST_MESSAGE_ID = "NEW_BROADCAST_MESSAGE_ID";
Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE = "broadcast_msg";
Blockly.LIST_VARIABLE_TYPE = "list";
Blockly.SCALAR_VARIABLE_TYPE = "";
Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE = "procedures_definition";
Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE = "procedures_prototype";
Blockly.PROCEDURES_CALL_BLOCK_TYPE = "procedures_call";
Blockly.StatusButtonState = { READY: "ready", NOT_READY: "not ready" };
Blockly.ScratchBlocks = {};
Blockly.ScratchBlocks.VerticalExtensions = {};
Blockly.ScratchBlocks.VerticalExtensions.colourHelper = function (a) {
  var b = Blockly.Colours[a];
  if (!(b && b.primary && b.secondary && b.tertiary))
    throw Error('Could not find colours for category "' + a + '"');
  return function () {
    this.setColourFromRawValues_(b.primary, b.secondary, b.tertiary);
  };
};
Blockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD = function () {
  this.setColourFromRawValues_(
    Blockly.Colours.textField,
    Blockly.Colours.textField,
    Blockly.Colours.textField
  );
};
Blockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT = function () {
  this.setInputsInline(!0);
  this.setPreviousStatement(!0, null);
  this.setNextStatement(!0, null);
};
Blockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT = function () {
  this.setInputsInline(!0);
  this.setNextStatement(!0, null);
};
Blockly.ScratchBlocks.VerticalExtensions.SHAPE_END = function () {
  this.setInputsInline(!0);
  this.setPreviousStatement(!0, null);
};
Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER = function () {
  this.setInputsInline(!0);
  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);
  this.setOutput(!0, "Number");
};
Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING = function () {
  this.setInputsInline(!0);
  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);
  this.setOutput(!0, "String");
};
Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_VARIABLE = function () {
  this.setInputsInline(!0);
  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);
  this.setOutput(!0, "VAR");
};
Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN = function () {
  this.setInputsInline(!0);
  this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);
  this.setOutput(!0, "Boolean");
};
Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU = {
  customContextMenu: function (a) {
    a.push(Blockly.Procedures.makeEditOption(this));
    for (var b = 0, c; (c = a[b]); b++)
      if (c.text == Blockly.Msg.DELETE_BLOCK) {
        var d = this.getInput("custom_block");
        if (d && d.connection && d.connection.targetBlock())
          var e = d.connection.targetBlock().getProcCode();
        else return;
        var f = this;
        c.callback = function () {
          Blockly.Procedures.deleteProcedureDefCallback(e, f) ||
            alert(Blockly.Msg.PROCEDURE_USED);
        };
      }
    for (b = 0; (c = a[b]); b++)
      if (c.text == Blockly.Msg.DUPLICATE) {
        a.splice(b, 1);
        break;
      }
  },
};
Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU = {
  customContextMenu: function (a) {
    a.push(Blockly.Procedures.makeEditOption(this));
  },
};
Blockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION = function () {
  this.isScratchExtension = !0;
};
Blockly.ScratchBlocks.VerticalExtensions.registerAll = function () {
  for (
    var a =
        "drive LEDs comment advanced functions control data data_lists sounds motion looks event sensing pen operators more".split(
          " "
        ),
      b = 0;
    b < a.length;
    b++
  ) {
    var c = a[b];
    Blockly.Extensions.register(
      "colours_" + c,
      Blockly.ScratchBlocks.VerticalExtensions.colourHelper(c)
    );
  }
  Blockly.Extensions.register(
    "colours_textfield",
    Blockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD
  );
  Blockly.Extensions.register(
    "shape_statement",
    Blockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT
  );
  Blockly.Extensions.register(
    "shape_hat",
    Blockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT
  );
  Blockly.Extensions.register(
    "shape_end",
    Blockly.ScratchBlocks.VerticalExtensions.SHAPE_END
  );
  Blockly.Extensions.register(
    "output_number",
    Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER
  );
  Blockly.Extensions.register(
    "output_string",
    Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING
  );
  Blockly.Extensions.register(
    "output_variable",
    Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_VARIABLE
  );
  Blockly.Extensions.register(
    "output_boolean",
    Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN
  );
  Blockly.Extensions.registerMixin(
    "procedure_def_contextmenu",
    Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU
  );
  Blockly.Extensions.registerMixin(
    "procedure_call_contextmenu",
    Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU
  );
  Blockly.Extensions.register(
    "scratch_extension",
    Blockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION
  );
};
Blockly.ScratchBlocks.VerticalExtensions.registerAll();
Blockly.Blocks.LEDs = {};
Blockly.Blocks.leds_left = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LED_LEFT + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "LEDS",
          options: [
            [Blockly.Msg.LED_DROPDOWN_ON, "ON"],
            [Blockly.Msg.LED_DROPDOWN_OFF, "OFF"],
          ],
        },
      ],
      category: Blockly.Categories.LEDs,
      extensions: ["colours_LEDs", "shape_statement"],
    });
  },
};
Blockly.Blocks.leds_right = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LED_RIGHT + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "LEDS",
          options: [
            [Blockly.Msg.LED_DROPDOWN_ON, "ON"],
            [Blockly.Msg.LED_DROPDOWN_OFF, "OFF"],
          ],
        },
      ],
      category: Blockly.Categories.LEDs,
      extensions: ["colours_LEDs", "shape_statement"],
    });
  },
};
Blockly.Blocks.leds_send_message = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LED_SEND_MESSAGE + " %1",
      args0: [
        {
          type: "input_value",
          name: "MESSAGE",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.LEDs,
      extensions: ["colours_LEDs", "shape_statement"],
    });
  },
};
Blockly.Blocks.Advanced = {};
Blockly.Blocks.Advanced_usb_received_data = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.ADVANCED_USB_RECEIVED_DATA,
      category: Blockly.Categories.advanced,
      extensions: ["colours_advanced", "output_number"],
    });
  },
};
Blockly.Blocks.Advanced_usb_received_data_variable = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.ADVANCED_USB_RECEIVED_DATA_VAR + " %1",
      args0: [{ type: "input_value", name: "VARIABLE", check: "VAR" }],
      category: Blockly.Categories.advanced,
      extensions: ["colours_advanced", "shape_statement"],
    });
  },
};
Blockly.Blocks.Advanced_usb_send_data = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.ADVANCED_USB_SEND_DATA +
        " %1 " +
        Blockly.Msg.ADVANCED_USB_SEND_VIA,
      args0: [
        {
          type: "input_value",
          name: "DATA",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.advanced,
      extensions: ["colours_advanced", "shape_statement"],
    });
  },
};
Blockly.Blocks.Comment = {};
Blockly.Blocks.Comment_userComment = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.COMMENT_USER_COMMENT + " %1",
      args0: [{ type: "input_value", name: "COMMENTTEXT", check: "String" }],
      category: Blockly.Categories.comment,
      extensions: ["colours_comment", "shape_statement"],
    });
  },
};
Blockly.Blocks.control = {};
Blockly.Blocks.control_forever = {
  init: function () {
    this.jsonInit({
      id: "control_forever",
      message0: Blockly.Msg.CONTROL_FOREVER,
      message1: "%1",
      message2: "%1",
      lastDummyAlign2: "RIGHT",
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      args2: [
        {
          type: "field_image",
          src: Blockly.mainWorkspace.options.pathToMedia + "repeat.svg",
          width: 24,
          height: 24,
          alt: "*",
          flip_rtl: !0,
        },
      ],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_end"],
    });
  },
};
Blockly.Blocks.control_repeat = {
  init: function () {
    this.jsonInit({
      id: "control_repeat",
      message0: Blockly.Msg.CONTROL_REPEAT,
      args0: [{ type: "input_value", name: "TIMES" ,check: "Number",max: 100}],
      message1: Blockly.Msg.CONTROL_REPEAT,
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      "previousStatement": null,
      "nextStatement": null,
      category: Blockly.Categories.control,
    });
  },
};
Blockly.Blocks.control_if = {
  init: function () {
    this.jsonInit({
      type: "control_if",
      message0: Blockly.Msg.CONTROL_IF + " %1 " + Blockly.Msg.CONTROL_THAN,
      message1: "%1",
      args0: [{ type: "input_value", name: "CONDITION", check: "Boolean" }],
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.control_if_else = {
  init: function () {
    this.jsonInit({
      type: "control_if_else",
      message0: Blockly.Msg.CONTROL_IF + " %1 " + Blockly.Msg.CONTROL_THAN,
      message1: "%1",
      message2: Blockly.Msg.CONTROL_ELSE,
      message3: "%1",
      args0: [{ type: "input_value", name: "CONDITION", check: "Boolean" }],
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      args3: [{ type: "input_statement", name: "SUBSTACK2" }],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.control_wait = {
  init: function () {
    this.jsonInit({
      id: "control_wait",
      message0:
        Blockly.Msg.CONTROL_WAIT + " %1 " + Blockly.Msg.CONTROL_WAIT_SEC,
      args0: [{ type: "input_value", name: "DURATION" }],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.control_wait_until = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.CONTROL_WAITUNTIL + " %1",
      args0: [{ type: "input_value", name: "CONDITION", check: "Boolean" }],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.control_repeat_until = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.CONTROL_REPEATUNTIL + " %1",
      message1: "%2",
      message2: "%3",
      lastDummyAlign2: "RIGHT",
      args0: [{ type: "input_value", name: "CONDITION", check: "Boolean" }],
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      args2: [
        {
          type: "field_image",
          src: Blockly.mainWorkspace.options.pathToMedia + "repeat.svg",
          width: 24,
          height: 24,
          alt: "*",
          flip_rtl: !0,
        },
      ],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.control_wait_milliseconds = {
  init: function () {
    this.jsonInit({
      id: "control_wait",
      message0:
        Blockly.Msg.CONTROL_WAIT +
        " %1 " +
        Blockly.Msg.CONTROL_WAIT_MILLISECONDS,
      args0: [{ type: "input_value", name: "DURATION" }],
      category: Blockly.Categories.control,
      extensions: ["colours_control", "shape_statement"],
    });
  },
};
Blockly.Blocks.data = {};
Blockly.Constants = {};
Blockly.Constants.Data = {};
Blockly.Blocks.data_variable = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      lastDummyAlign0: "CENTRE",
      args0: [
        {
          type: "field_variable_getter",
          text: "",
          name: "VARIABLE",
          variableType: "",
        },
      ],
      category: Blockly.Categories.data,
      checkboxInFlyout: !0,
      extensions: ["colours_data", "output_variable"],
    });
  },
};
Blockly.Blocks.data_setvariableto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_SET + " %1 " + Blockly.Msg.DATA_TO + " %2",
      args0: [
        { type: "input_value", name: "VARIABLE", check: "VAR" },
        {
          type: "input_value",
          name: "VALUE",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_incvariable = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_INCVARIABLE + " %1",
      args0: [{ type: "input_value", name: "VARIABLE", check: "VAR" }],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_decvariable = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_DECVARIABLE + " %1",
      args0: [{ type: "input_value", name: "VARIABLE", check: "VAR" }],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_bitShiftLeft = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DATA_BITSHIFT +
        " %1 " +
        Blockly.Msg.DATA_BITSHIFTLEFT +
        " %2",
      args0: [
        { type: "input_value", name: "VARIABLE", check: "VAR" },
        {
          type: "input_value",
          name: "VALUE",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_bitShiftRight = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DATA_BITSHIFT +
        " %1 " +
        Blockly.Msg.DATA_BITSHIFTRIGHT +
        " %2",
      args0: [
        { type: "input_value", name: "VARIABLE", check: "VAR" },
        {
          type: "input_value",
          name: "VALUE",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_changevariableby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_CHANGEVARIABLEBY,
      args0: [
        { type: "input_value", name: "VARIABLE" },
        { type: "input_value", name: "VALUE" },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_data", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_showvariable = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_SHOWVARIABLE,
      args0: [{ type: "field_variable", name: "VARIABLE" }],
      previousStatement: null,
      nextStatement: null,
      category: Blockly.Categories.data,
      colour: Blockly.Colours.data.primary,
      colourSecondary: Blockly.Colours.data.secondary,
      colourTertiary: Blockly.Colours.data.tertiary,
    });
  },
};
Blockly.Blocks.data_hidevariable = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_HIDEVARIABLE,
      args0: [{ type: "field_variable", name: "VARIABLE" }],
      previousStatement: null,
      nextStatement: null,
      category: Blockly.Categories.data,
      colour: Blockly.Colours.data.primary,
      colourSecondary: Blockly.Colours.data.secondary,
      colourTertiary: Blockly.Colours.data.tertiary,
    });
  },
};
Blockly.Blocks.data_listcontents = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_variable_getter",
          text: "",
          name: "LIST",
          variableType: Blockly.LIST_VARIABLE_TYPE,
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: [
        "contextMenu_getListBlock",
        "colours_data_lists",
        "output_string",
      ],
      checkboxInFlyout: !0,
    });
  },
};
Blockly.Blocks.data_listindexall = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_numberdropdown",
          name: "INDEX",
          value: "1",
          min: 1,
          precision: 1,
          options: [
            ["1", "1"],
            [Blockly.Msg.DATA_INDEX_LAST, "last"],
            [Blockly.Msg.DATA_INDEX_ALL, "all"],
          ],
        },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_textfield", "output_string"],
    });
  },
};
Blockly.Blocks.data_listindexrandom = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_numberdropdown",
          name: "INDEX",
          value: "1",
          min: 1,
          precision: 1,
          options: [
            ["1", "1"],
            [Blockly.Msg.DATA_INDEX_LAST, "last"],
            [Blockly.Msg.DATA_INDEX_RANDOM, "random"],
          ],
        },
      ],
      category: Blockly.Categories.data,
      extensions: ["colours_textfield", "output_string"],
    });
  },
};
Blockly.Blocks.data_addtolist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_ADDTOLIST,
      args0: [
        { type: "input_value", name: "ITEM" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_deleteoflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_DELETEOFLIST,
      args0: [
        { type: "input_value", name: "INDEX" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_deletealloflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_DELETEALLOFLIST,
      args0: [
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_insertatlist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_INSERTATLIST,
      args0: [
        { type: "input_value", name: "ITEM" },
        { type: "input_value", name: "INDEX" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_replaceitemoflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_REPLACEITEMOFLIST,
      args0: [
        { type: "input_value", name: "INDEX" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
        { type: "input_value", name: "ITEM" },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_itemoflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_ITEMOFLIST,
      args0: [
        { type: "input_value", name: "INDEX" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      output: null,
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists"],
      outputShape: Blockly.OUTPUT_SHAPE_ROUND,
    });
  },
};
Blockly.Blocks.data_itemnumoflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_ITEMNUMOFLIST,
      args0: [
        { type: "input_value", name: "ITEM" },
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      output: null,
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists"],
      outputShape: Blockly.OUTPUT_SHAPE_ROUND,
    });
  },
};
Blockly.Blocks.data_lengthoflist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_LENGTHOFLIST,
      args0: [
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "output_number"],
    });
  },
};
Blockly.Blocks.data_listcontainsitem = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_LISTCONTAINSITEM,
      args0: [
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
        { type: "input_value", name: "ITEM" },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "output_boolean"],
    });
  },
};
Blockly.Blocks.data_showlist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_SHOWLIST,
      args0: [
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Blocks.data_hidelist = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DATA_HIDELIST,
      args0: [
        {
          type: "field_variable",
          name: "LIST",
          variableTypes: [Blockly.LIST_VARIABLE_TYPE],
        },
      ],
      category: Blockly.Categories.dataLists,
      extensions: ["colours_data_lists", "shape_statement"],
    });
  },
};
Blockly.Constants.Data.CUSTOM_CONTEXT_MENU_GET_VARIABLE_MIXIN = {
  customContextMenu: function (a) {
    if (!this.isCollapsed()) {
      var b = this.getField("VARIABLE").text_;
      if (this.isInFlyout) {
        var c = {
          text: Blockly.Msg.RENAME_VARIABLE,
          enabled: !0,
          callback: Blockly.Constants.Data.RENAME_OPTION_CALLBACK_FACTORY(
            this,
            "VARIABLE"
          ),
        };
        b = {
          text: Blockly.Msg.DELETE_VARIABLE.replace("%1", b),
          enabled: !0,
          callback: Blockly.Constants.Data.DELETE_OPTION_CALLBACK_FACTORY(
            this,
            "VARIABLE"
          ),
        };
        a.push(c);
        a.push(b);
      } else {
        c = this.workspace.getVariablesOfType("");
        c.sort(function (g, h) {
          return Blockly.scratchBlocksUtils.compareStrings(g.name, h.name);
        });
        for (var d = 0; d < c.length; d++) {
          var e = c[d].name;
          if (e != b) {
            var f = { enabled: !0 };
            f.text = e;
            f.callback =
              Blockly.Constants.Data.VARIABLE_OPTION_CALLBACK_FACTORY(
                this,
                c[d].getId(),
                "VARIABLE"
              );
            a.push(f);
          }
        }
      }
    }
  },
};
Blockly.Extensions.registerMixin(
  "contextMenu_getVariableBlock",
  Blockly.Constants.Data.CUSTOM_CONTEXT_MENU_GET_VARIABLE_MIXIN
);
Blockly.Constants.Data.CUSTOM_CONTEXT_MENU_GET_LIST_MIXIN = {
  customContextMenu: function (a) {
    if (!this.isCollapsed()) {
      var b = this.getField("LIST").text_;
      if (this.isInFlyout) {
        var c = {
          text: Blockly.Msg.RENAME_LIST,
          enabled: !0,
          callback: Blockly.Constants.Data.RENAME_OPTION_CALLBACK_FACTORY(
            this,
            "LIST"
          ),
        };
        b = {
          text: Blockly.Msg.DELETE_LIST.replace("%1", b),
          enabled: !0,
          callback: Blockly.Constants.Data.DELETE_OPTION_CALLBACK_FACTORY(
            this,
            "LIST"
          ),
        };
        a.push(c);
        a.push(b);
      } else {
        c = this.workspace.getVariablesOfType("list");
        c.sort(function (g, h) {
          return Blockly.scratchBlocksUtils.compareStrings(g.name, h.name);
        });
        for (var d = 0; d < c.length; d++) {
          var e = c[d].name;
          if (e != b) {
            var f = { enabled: !0 };
            f.text = e;
            f.callback =
              Blockly.Constants.Data.VARIABLE_OPTION_CALLBACK_FACTORY(
                this,
                c[d].getId(),
                "LIST"
              );
            a.push(f);
          }
        }
      }
    }
  },
};
Blockly.Extensions.registerMixin(
  "contextMenu_getListBlock",
  Blockly.Constants.Data.CUSTOM_CONTEXT_MENU_GET_LIST_MIXIN
);
Blockly.Constants.Data.VARIABLE_OPTION_CALLBACK_FACTORY = function (a, b, c) {
  return function () {
    var d = a.getField(c);
    d ||
      console.log("Tried to get a variable field on the wrong type of block.");
    d.setValue(b);
  };
};
Blockly.Constants.Data.RENAME_OPTION_CALLBACK_FACTORY = function (a, b) {
  return function () {
    var c = a.workspace,
      d = a.getField(b).getVariable();
    Blockly.Variables.renameVariable(c, d);
  };
};
Blockly.Constants.Data.DELETE_OPTION_CALLBACK_FACTORY = function (a, b) {
  return function () {
    var c = a.workspace,
      d = a.getField(b).getVariable();
    c.deleteVariableById(d.getId());
  };
};
Blockly.Blocks.defaultToolbox =
  '<xml id="toolbox-categories" style="display: none"><category name="%{BKY_CATEGORY_DRIVE}" id="drive" colour="#4C97FF" secondaryColour="#3373CC"><block type="drive_forwards_distance" id="drive_forwards_distance"><value name="DISTANCE"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_backwards_distance" id="drive_backwards_distance"><value name="DISTANCE"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_left_distance" id="drive_left_distance"><value name="DISTANCE"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_right_distance" id="drive_right_distance"><value name="DISTANCE"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_forwards_until" id="drive_forwards_until"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_backwards_until" id="drive_backwards_until"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_left_until" id="drive_left_until"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_right_until" id="drive_right_until"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><sep gap="60"></sep><block type="drive_set_left_motor" id="drive_set_left_motor"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_set_right_motor" id="drive_set_right_motor"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_set_both_motor" id="drive_set_both_motor"><value name="SPEED"><shadow type="drive_speed_menu"><field name="SPEED_MENU">5</field></shadow></value></block><block type="drive_stop"></block></category><category name="%{BKY_CATEGORY_LED}" id="looks" colour="#9966FF" secondaryColour="#774DCB"><block type="leds_left" id="leds_left"></block><block type="leds_right" id="leds_right"></block><block type="leds_send_message" id="leds_send_message"><value name="MESSAGE"><shadow type="math_whole_number"><field name="NUM">10</field></shadow></value></block></category><category name="%{BKY_CATEGORY_SOUND}" id="sound" colour="#D65CD6" secondaryColour="#BD42BD"><block type="sound_beep" id="sound_beep"></block><block type="sound_play_note" id="sound_play_note"><field name="NOTEDURATION">1</field><field name="NOTE">o</field><field name="NOTETYPE">N</field></block><block type="sound_set_tempo" id="sound_set_tempo"><field name="TEMPO">Ed.TEMPO_MEDIUM</field></block><block type="sound_PlayinBackground" id="sound_PlayinBackground"></block></category><category name="%{BKY_CATEGORY_VARIABLES}" id="data" colour="#FF8C1A" secondaryColour="#DB6E00" custom="VARIABLE"></category><category name="%{BKY_CATEGORY_EVENTS}" id="events" colour="#FFD500" secondaryColour="#CC9900" custom="EVENTSTART"></category><category name="%{BKY_CATEGORY_CONTROL}" id="control" colour="#FFAB19" secondaryColour="#CF8B17"><block type="control_wait" id="control_wait"><value name="DURATION"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value></block><block type="control_repeat" id="event_Start"><value name="TIMES"><shadow type="math_whole_number"><field name="NUM">10</field></shadow></value></block><block type="control_forever" id="control_forever"></block><block type="control_if" id="control_if"></block><block type="control_if_else" id="control_if_else"></block><block type="control_wait_until" id="control_wait_until"></block><block type="control_repeat_until" id="control_repeat_until"></block><block type="control_wait_milliseconds" id="control_wait_milliseconds"></block></category><category name="%{BKY_CATEGORY_SENSING}" id="sensing" colour="#4CBFE6" secondaryColour="#2E8EB8"><block type="sensing_TurnLineTrackingLED" id="sensing_TurnLineTrackingLED"></block><block type="sensing_TurnObstacleBeam" id="sensing_TurnObstacleBeam"></block><block type="sensing_ClearSensor" id="sensing_ClearSensor"></block><block type="sensing_ClapDetected" id="sensing_ClapDetected"></block><block type="sensing_ButtonPressed" id="sensing_ButtonPressed"></block><block type="sensing_Obstacle" id="sensing_Obstacle"></block><block type="sensing_LineTracker" id="sensing_LineTracker"></block><block type="sensing_remote_bool" id="sensing_remote_bool"></block><block type="sensing_IRMessage_Detected" id="sensing_IRMessage_Detected"></block><block type="sensing_driveStrained" id="sensing_driveStrained"></block><block type="sensing_remote_num" id="sensing_remote_num"></block><block type="sensing_IRmessage" id="sensing_IRmessage"></block><block type="sensing_LightLevel" id="sensing_LightLevel"></block></category><category name="%{BKY_CATEGORY_OPERATORS}" id="operators" colour="#40BF4A" secondaryColour="#389438"><block type="operator_add" id="operator_add"><value name="NUM1"><shadow type="math_integer"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_integer"><field name="NUM"></field></shadow></value></block><block type="operator_subtract" id="operator_subtract"><value name="NUM1"><shadow type="math_integer"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_integer"><field name="NUM"></field></shadow></value></block><block type="operator_multiply" id="operator_multiply"><value name="NUM1"><shadow type="math_integer"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_integer"><field name="NUM"></field></shadow></value></block><block type="operator_divide" id="operator_divide"><value name="NUM1"><shadow type="math_integer"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_integer"><field name="NUM"></field></shadow></value></block><block type="operator_random" id="operator_random"><value name="FROM"><shadow type="math_integer"><field name="NUM">1</field></shadow></value><value name="TO"><shadow type="math_integer"><field name="NUM">10</field></shadow></value></block><block type="operator_abs" id="operator_multiply"><value name="NUM1"><shadow type="math_integer"><field name="NUM"></field></shadow></value></block><block type="operator_lt" id="operator_lt"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_lt_equal" id="operator_lt"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_equals" id="operator_equals"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_gt_equal" id="operator_gt"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_gt" id="operator_gt"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_not_equals" id="operator_equals"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_between" id="operator_equals"><value name="OPERAND1"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND2"><shadow type="math_integer"><field name="NUM">0</field></shadow></value><value name="OPERAND3"><shadow type="math_integer"><field name="NUM">0</field></shadow></value></block><block type="operator_and" id="operator_and"></block><block type="operator_or" id="operator_or"></block><block type="operator_not" id="operator_not"></block></category><category name="%{BKY_CATEGORY_COMMENT}" id="extensions" colour="#FF6680" secondaryColour="#FF4D6A"><block type="Comment_userComment"><value name="COMMENTTEXT"><shadow type="comment_text"><field name="TEXT" fill="#FFF">Your Comment</field></shadow></value></block></category><category name="%{BKY_CATEGORY_ADVANCED}" id="extensions" colour="#bd0f40" secondaryColour="#a50d38"><block type="Advanced_usb_send_data" id="Advanced_usb_send_data"><value name="DATA"><shadow type="math_integer"><field name="NUM">1</field></shadow></value></block><block type="Advanced_usb_received_data_variable" id="Advanced_usb_send_data"></block></category><category name="%{BKY_CATEGORY_MYBLOCKS}" id="more" colour="#FF6E4F" secondaryColour="#FF5C39" custom="PROCEDURE"></category></xml>';
Blockly.Blocks.drive = {};
Blockly.Blocks.drive_speed_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "SPEED_MENU",
          options: [
            ["1", "1"],
            ["2", "2"],
            ["3", "3"],
            ["4", "4"],
            ["5", "5"],
            ["6", "6"],
            ["7", "7"],
            ["8", "8"],
            ["9", "9"],
            ["10", "10"],
          ],
        },
      ],
      colour: Blockly.Colours.drive.secondary,
      colourSecondary: Blockly.Colours.drive.secondary,
      colourTertiary: Blockly.Colours.drive.tertiary,
      extensions: ["output_number"],
    });
  },
};
Blockly.Blocks.drive_forwards_distance = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_FORWARDS_DISTANCE +
        " %1 %2 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %3",
      args0: [
        {
          type: "input_value",
          name: "DISTANCE",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "field_dropdown",
          name: "UNITS",
          options: [
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_CM, "Ed.CM"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_INCH, "Ed.INCH"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_SECONDS, "Ed.TIME"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_backwards_distance = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_BACKWARDS_DISTANCE +
        " %1 %2 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %3",
      args0: [
        {
          type: "input_value",
          name: "DISTANCE",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "field_dropdown",
          name: "UNITS",
          options: [
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_CM, "Ed.CM"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_INCH, "Ed.INCH"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_SECONDS, "Ed.TIME"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_left_distance = {
  init: function () {
    this.jsonInit({
      message0:
        "%1 " +
        Blockly.Msg.DRIVE_LEFT_DISTANCE +
        " %2 %3 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %4",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_SPIN, "Ed.SPIN"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        {
          type: "input_value",
          name: "DISTANCE",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "field_dropdown",
          name: "UNITS",
          options: [
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_DEGREES, "Ed.CM"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_SECONDS, "Ed.TIME"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_right_distance = {
  init: function () {
    this.jsonInit({
      message0:
        "%1 " +
        Blockly.Msg.DRIVE_RIGHT_DISTANCE +
        " %2 %3 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %4",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_SPIN, "Ed.SPIN"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        {
          type: "input_value",
          name: "DISTANCE",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "field_dropdown",
          name: "UNITS",
          options: [
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_DEGREES, "Ed.CM"],
            [Blockly.Msg.DRIVE_DISTANCE_DROPDOWN_SECONDS, "Ed.TIME"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_forwards_until = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_FORWARDS_UNTIL +
        " %1 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %2",
      args0: [
        { type: "input_value", name: "WHILE", check: "Boolean" },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_backwards_until = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_BACKWARDS_UNTIL +
        " %1 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %2",
      args0: [
        { type: "input_value", name: "WHILE", check: "Boolean" },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_left_until = {
  init: function () {
    this.jsonInit({
      message0:
        "%1 " +
        Blockly.Msg.DRIVE_LEFT_UNTIL +
        " %2 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %3",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_SPIN, "Ed.SPIN"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        { type: "input_value", name: "WHILE", check: "Boolean" },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_right_until = {
  init: function () {
    this.jsonInit({
      message0:
        "%1 " +
        Blockly.Msg.DRIVE_RIGHT_UNTIL +
        " %2 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %3",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_SPIN, "Ed.SPIN"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_TURN_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        { type: "input_value", name: "WHILE", check: "Boolean" },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_set_left_motor = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_SET_LEFT_MOTOR +
        " %1 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %2",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_SET_MOTOR_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_SET_MOTOR_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_set_right_motor = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_SET_RIGHT_MOTOR +
        " %1 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %2",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_SET_MOTOR_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [Blockly.Msg.DRIVE_SET_MOTOR_DROPDOWN_BACKWARDS, "Ed.BACKWARD"],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_set_both_motor = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.DRIVE_SET_BOTH_MOTOR +
        " %1 " +
        Blockly.Msg.DRIVE_AT_SPEED +
        " %2",
      args0: [
        {
          type: "field_dropdown",
          name: "DIRECTION",
          options: [
            [Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_FORWARDS, "Ed.FORWARD"],
            [
              Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_BACKWARDS,
              "Ed.BACKWARD",
            ],
            [
              Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_SPIN_LEFT,
              "Ed.SPIN_LEFT",
            ],
            [
              Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_SPIN_RIGHT,
              "Ed.SPIN_RIGHT",
            ],
            [
              Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_TURN_LEFT,
              "Ed.FORWARD_LEFT",
            ],
            [
              Blockly.Msg.DRIVE_SET_BOTH_MOTOR_DROPDOWN_TURN_RIGHT,
              "Ed.FORWARD_RIGHT",
            ],
          ],
        },
        {
          type: "input_value",
          name: "SPEED",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.drive_stop = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.DRIVE_STOP + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "MOTOR",
          options: [
            [Blockly.Msg.DRIVE_STOP_DROPDOWN_BOTH, "Ed.Drive"],
            [Blockly.Msg.DRIVE_STOP_DROPDOWN_LEFT, "Ed.DriveLeftMotor"],
            [Blockly.Msg.DRIVE_STOP_DROPDOWN_RIGHT, "Ed.DriveRightMotor"],
          ],
        },
      ],
      category: Blockly.Categories.drive,
      extensions: ["colours_drive", "shape_statement"],
    });
  },
};
Blockly.Blocks.event = {};
Blockly.Blocks.event_AnyObstacle = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_ANY_OBSTACLE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_ObstacleAhead = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_OBSTACLE_AHEAD,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_ObstacleLeft = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_OBSTACLE_LEFT,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_ObstacleRight = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_OBSTACLE_RIGHT,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_clap = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_CLAP,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_TriangleButton = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_BUTTON_TRIANGLE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_RoundButton = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_BUTTON_ROUND,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_LineReflective = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_LINE_REFLECTIVE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_LineNonReflective = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_LINE_NON_REFLECTIVE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_LineChange = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_LINE_CHANGE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_Message = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_MESSAGE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_Remote = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_REMOTE,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_DriveStrain = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_DRIVE_STRAIN,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.event_Start = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.EVENT_START,
      category: Blockly.Categories.event,
      extensions: ["colours_event", "shape_hat"],
    });
  },
};
Blockly.Blocks.extensions = {};
Blockly.Blocks.extension_pen_down = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 pen down",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/pen-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "shape_statement", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_music_drum = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 play drum %3",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/music-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
        { type: "input_value", name: "NUMBER" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "shape_statement", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_wedo_motor = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 turn a motor %3",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/wedo2-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
        {
          type: "field_image",
          src: Blockly.mainWorkspace.options.pathToMedia + "rotate-right.svg",
          width: 24,
          height: 24,
        },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "shape_statement", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_wedo_hat = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 when I am wearing a hat",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/wedo2-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "shape_hat", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_wedo_boolean = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 O RLY?",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/wedo2-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "output_boolean", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_wedo_tilt_reporter = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 tilt angle %3",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/wedo2-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
        { type: "input_value", name: "TILT" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "output_number", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_wedo_tilt_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "TILT",
          options: [
            ["Any", "Any"],
            ["Whirl", "Whirl"],
            ["South", "South"],
            ["Back in time", "Back in time"],
          ],
        },
      ],
      extensions: ["colours_more", "output_string"],
    });
  },
};
Blockly.Blocks.extension_music_reporter = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 hey now, you're an all-star",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/music-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
      ],
      category: Blockly.Categories.more,
      extensions: ["colours_more", "output_number", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_microbit_display = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 display %3",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/microbit-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
        { type: "input_value", name: "MATRIX" },
      ],
      category: Blockly.Categories.pen,
      extensions: ["colours_pen", "shape_statement", "scratch_extension"],
    });
  },
};
Blockly.Blocks.extension_music_play_note = {
  init: function () {
    this.jsonInit({
      message0: "%1 %2 play note %3 for %4 beats",
      args0: [
        {
          type: "field_image",
          src:
            Blockly.mainWorkspace.options.pathToMedia +
            "extensions/music-block-icon.svg",
          width: 40,
          height: 40,
        },
        { type: "field_vertical_separator" },
        { type: "input_value", name: "NOTE" },
        { type: "input_value", name: "BEATS" },
      ],
      category: Blockly.Categories.pen,
      extensions: ["colours_pen", "shape_statement", "scratch_extension"],
    });
  },
};
Blockly.Blocks.looks = {};
Blockly.Blocks.looks_sayforsecs = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SAYFORSECS,
      args0: [
        { type: "input_value", name: "MESSAGE" },
        { type: "input_value", name: "SECS" },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_say = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SAY,
      args0: [{ type: "input_value", name: "MESSAGE" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_thinkforsecs = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_THINKFORSECS,
      args0: [
        { type: "input_value", name: "MESSAGE" },
        { type: "input_value", name: "SECS" },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_think = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_THINK,
      args0: [{ type: "input_value", name: "MESSAGE" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_show = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SHOW,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_hide = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_HIDE,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_hideallsprites = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_HIDEALLSPRITES,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_changeeffectby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_CHANGEEFFECTBY,
      args0: [
        {
          type: "field_dropdown",
          name: "EFFECT",
          options: [
            [Blockly.Msg.LOOKS_EFFECT_COLOR, "COLOR"],
            [Blockly.Msg.LOOKS_EFFECT_FISHEYE, "FISHEYE"],
            [Blockly.Msg.LOOKS_EFFECT_WHIRL, "WHIRL"],
            [Blockly.Msg.LOOKS_EFFECT_PIXELATE, "PIXELATE"],
            [Blockly.Msg.LOOKS_EFFECT_MOSAIC, "MOSAIC"],
            [Blockly.Msg.LOOKS_EFFECT_BRIGHTNESS, "BRIGHTNESS"],
            [Blockly.Msg.LOOKS_EFFECT_GHOST, "GHOST"],
          ],
        },
        { type: "input_value", name: "CHANGE" },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_seteffectto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SETEFFECTTO,
      args0: [
        {
          type: "field_dropdown",
          name: "EFFECT",
          options: [
            [Blockly.Msg.LOOKS_EFFECT_COLOR, "COLOR"],
            [Blockly.Msg.LOOKS_EFFECT_FISHEYE, "FISHEYE"],
            [Blockly.Msg.LOOKS_EFFECT_WHIRL, "WHIRL"],
            [Blockly.Msg.LOOKS_EFFECT_PIXELATE, "PIXELATE"],
            [Blockly.Msg.LOOKS_EFFECT_MOSAIC, "MOSAIC"],
            [Blockly.Msg.LOOKS_EFFECT_BRIGHTNESS, "BRIGHTNESS"],
            [Blockly.Msg.LOOKS_EFFECT_GHOST, "GHOST"],
          ],
        },
        { type: "input_value", name: "VALUE" },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_cleargraphiceffects = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_CLEARGRAPHICEFFECTS,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_changesizeby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_CHANGESIZEBY,
      args0: [{ type: "input_value", name: "CHANGE" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_setsizeto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SETSIZETO,
      args0: [{ type: "input_value", name: "SIZE" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_size = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SIZE,
      category: Blockly.Categories.looks,
      checkboxInFlyout: !0,
      extensions: ["colours_looks", "output_number"],
    });
  },
};
Blockly.Blocks.looks_changestretchby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_CHANGESTRETCHBY,
      args0: [{ type: "input_value", name: "CHANGE" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_setstretchto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SETSTRETCHTO,
      args0: [{ type: "input_value", name: "STRETCH" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_costume = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "COSTUME",
          options: [
            ["costume1", "COSTUME1"],
            ["costume2", "COSTUME2"],
          ],
        },
      ],
      colour: Blockly.Colours.looks.secondary,
      colourSecondary: Blockly.Colours.looks.secondary,
      colourTertiary: Blockly.Colours.looks.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.looks_switchcostumeto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SWITCHCOSTUMETO,
      args0: [{ type: "input_value", name: "COSTUME" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_nextcostume = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_NEXTCOSTUME,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_switchbackdropto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SWITCHBACKDROPTO,
      args0: [{ type: "input_value", name: "BACKDROP" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_backdrops = {
  init: function () {
    this.jsonInit({
      id: "looks_backdrops",
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "BACKDROP",
          options: [["backdrop1", "BACKDROP1"]],
        },
      ],
      colour: Blockly.Colours.looks.secondary,
      colourSecondary: Blockly.Colours.looks.secondary,
      colourTertiary: Blockly.Colours.looks.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.looks_gotofrontback = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_GOTOFRONTBACK,
      args0: [
        {
          type: "field_dropdown",
          name: "FRONT_BACK",
          options: [
            [Blockly.Msg.LOOKS_GOTOFRONTBACK_FRONT, "front"],
            [Blockly.Msg.LOOKS_GOTOFRONTBACK_BACK, "back"],
          ],
        },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_goforwardbackwardlayers = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_GOFORWARDBACKWARDLAYERS,
      args0: [
        {
          type: "field_dropdown",
          name: "FORWARD_BACKWARD",
          options: [
            [Blockly.Msg.LOOKS_GOFORWARDBACKWARDLAYERS_FORWARD, "forward"],
            [Blockly.Msg.LOOKS_GOFORWARDBACKWARDLAYERS_BACKWARD, "backward"],
          ],
        },
        { type: "input_value", name: "NUM" },
      ],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_backdropnumbername = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_BACKDROPNUMBERNAME,
      args0: [
        {
          type: "field_dropdown",
          name: "NUMBER_NAME",
          options: [
            [Blockly.Msg.LOOKS_NUMBERNAME_NUMBER, "number"],
            [Blockly.Msg.LOOKS_NUMBERNAME_NAME, "name"],
          ],
        },
      ],
      category: Blockly.Categories.looks,
      checkboxInFlyout: !0,
      extensions: ["colours_looks", "output_number"],
    });
  },
};
Blockly.Blocks.looks_costumenumbername = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_COSTUMENUMBERNAME,
      args0: [
        {
          type: "field_dropdown",
          name: "NUMBER_NAME",
          options: [
            [Blockly.Msg.LOOKS_NUMBERNAME_NUMBER, "number"],
            [Blockly.Msg.LOOKS_NUMBERNAME_NAME, "name"],
          ],
        },
      ],
      category: Blockly.Categories.looks,
      checkboxInFlyout: !0,
      extensions: ["colours_looks", "output_number"],
    });
  },
};
Blockly.Blocks.looks_switchbackdroptoandwait = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_SWITCHBACKDROPTOANDWAIT,
      args0: [{ type: "input_value", name: "BACKDROP" }],
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.looks_nextbackdrop = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.LOOKS_NEXTBACKDROP_BLOCK,
      category: Blockly.Categories.looks,
      extensions: ["colours_looks", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion = {};
Blockly.Blocks.motion_movesteps = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_MOVESTEPS,
      args0: [{ type: "input_value", name: "STEPS" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_turnright = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_TURNRIGHT,
      args0: [
        {
          type: "field_image",
          src: Blockly.mainWorkspace.options.pathToMedia + "rotate-right.svg",
          width: 24,
          height: 24,
        },
        { type: "input_value", name: "DEGREES" },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_turnleft = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_TURNLEFT,
      args0: [
        {
          type: "field_image",
          src: Blockly.mainWorkspace.options.pathToMedia + "rotate-left.svg",
          width: 24,
          height: 24,
        },
        { type: "input_value", name: "DEGREES" },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_pointindirection = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_POINTINDIRECTION,
      args0: [{ type: "input_value", name: "DIRECTION" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_pointtowards_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "TOWARDS",
          options: [
            [Blockly.Msg.MOTION_POINTTOWARDS_POINTER, "_mouse_"],
            [Blockly.Msg.MOTION_POINTTOWARDS_RANDOM, "_random_"],
          ],
        },
      ],
      colour: Blockly.Colours.motion.secondary,
      colourSecondary: Blockly.Colours.motion.secondary,
      colourTertiary: Blockly.Colours.motion.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.motion_pointtowards = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_POINTTOWARDS,
      args0: [{ type: "input_value", name: "TOWARDS" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_goto_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "TO",
          options: [
            [Blockly.Msg.MOTION_GOTO_POINTER, "_mouse_"],
            [Blockly.Msg.MOTION_GOTO_RANDOM, "_random_"],
          ],
        },
      ],
      colour: Blockly.Colours.motion.secondary,
      colourSecondary: Blockly.Colours.motion.secondary,
      colourTertiary: Blockly.Colours.motion.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.motion_gotoxy = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_GOTOXY,
      args0: [
        { type: "input_value", name: "X" },
        { type: "input_value", name: "Y" },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_goto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_GOTO,
      args0: [{ type: "input_value", name: "TO" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_glidesecstoxy = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_GLIDESECSTOXY,
      args0: [
        { type: "input_value", name: "SECS" },
        { type: "input_value", name: "X" },
        { type: "input_value", name: "Y" },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_glideto_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "TO",
          options: [
            [Blockly.Msg.MOTION_GLIDETO_POINTER, "_mouse_"],
            [Blockly.Msg.MOTION_GLIDETO_RANDOM, "_random_"],
          ],
        },
      ],
      colour: Blockly.Colours.motion.secondary,
      colourSecondary: Blockly.Colours.motion.secondary,
      colourTertiary: Blockly.Colours.motion.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.motion_glideto = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_GLIDETO,
      args0: [
        { type: "input_value", name: "SECS" },
        { type: "input_value", name: "TO" },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_changexby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_CHANGEXBY,
      args0: [{ type: "input_value", name: "DX" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_setx = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_SETX,
      args0: [{ type: "input_value", name: "X" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_changeyby = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_CHANGEYBY,
      args0: [{ type: "input_value", name: "DY" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_sety = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_SETY,
      args0: [{ type: "input_value", name: "Y" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_ifonedgebounce = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_IFONEDGEBOUNCE,
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_setrotationstyle = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_SETROTATIONSTYLE,
      args0: [
        {
          type: "field_dropdown",
          name: "STYLE",
          options: [
            [Blockly.Msg.MOTION_SETROTATIONSTYLE_LEFTRIGHT, "left-right"],
            [Blockly.Msg.MOTION_SETROTATIONSTYLE_DONTROTATE, "don't rotate"],
            [Blockly.Msg.MOTION_SETROTATIONSTYLE_ALLAROUND, "all around"],
          ],
        },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_xposition = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_XPOSITION,
      category: Blockly.Categories.motion,
      checkboxInFlyout: !0,
      extensions: ["colours_motion", "output_number"],
    });
  },
};
Blockly.Blocks.motion_yposition = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_YPOSITION,
      category: Blockly.Categories.motion,
      checkboxInFlyout: !0,
      extensions: ["colours_motion", "output_number"],
    });
  },
};
Blockly.Blocks.motion_direction = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_DIRECTION,
      category: Blockly.Categories.motion,
      checkboxInFlyout: !0,
      extensions: ["colours_motion", "output_number"],
    });
  },
};
Blockly.Blocks.motion_scroll_right = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_SCROLLRIGHT,
      args0: [{ type: "input_value", name: "DISTANCE" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_scroll_up = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_SCROLLUP,
      args0: [{ type: "input_value", name: "DISTANCE" }],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_align_scene = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_ALIGNSCENE,
      args0: [
        {
          type: "field_dropdown",
          name: "ALIGNMENT",
          options: [
            [Blockly.Msg.MOTION_ALIGNSCENE_BOTTOMLEFT, "bottom-left"],
            [Blockly.Msg.MOTION_ALIGNSCENE_BOTTOMRIGHT, "bottom-right"],
            [Blockly.Msg.MOTION_ALIGNSCENE_MIDDLE, "middle"],
            [Blockly.Msg.MOTION_ALIGNSCENE_TOPLEFT, "top-left"],
            [Blockly.Msg.MOTION_ALIGNSCENE_TOPRIGHT, "top-right"],
          ],
        },
      ],
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "shape_statement"],
    });
  },
};
Blockly.Blocks.motion_xscroll = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_XSCROLL,
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "output_number"],
    });
  },
};
Blockly.Blocks.motion_yscroll = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.MOTION_YSCROLL,
      category: Blockly.Categories.motion,
      extensions: ["colours_motion", "output_number"],
    });
  },
};
Blockly.Blocks.operators = {};
Blockly.Blocks.operator_add = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_ADD,
      args0: [
        {
          type: "input_value",
          name: "NUM1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "NUM2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_subtract = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_SUBTRACT,
      args0: [
        {
          type: "input_value",
          name: "NUM1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "NUM2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_multiply = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_MULTIPLY,
      args0: [
        {
          type: "input_value",
          name: "NUM1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "NUM2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_divide = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_DIVIDE,
      args0: [
        {
          type: "input_value",
          name: "NUM1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "NUM2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_random = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.OPERATORS_RANDOM +
        " %1 " +
        Blockly.Msg.OPERATORS_AND +
        " %2",
      args0: [
        {
          type: "input_value",
          name: "FROM",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "TO",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_abs = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_ABS + " %1",
      args0: [
        {
          type: "input_value",
          name: "NUM1",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_number"],
    });
  },
};
Blockly.Blocks.operator_lt = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_LT,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_lt_equal = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_LT_EQUAL,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_equals = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_EQUALS,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_gt_equal = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_GT_EQUAL,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_gt = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_GT,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_not_equals = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_NOT_EQUALS,
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_between = {
  init: function () {
    this.jsonInit({
      message0:
        "%1 " +
        Blockly.Msg.OPERATORS_BETWEEN +
        " %2 " +
        Blockly.Msg.OPERATORS_AND +
        " %3",
      args0: [
        {
          type: "input_value",
          name: "OPERAND1",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND2",
          check: ["Number", "Number1", "VAR"],
        },
        {
          type: "input_value",
          name: "OPERAND3",
          check: ["Number", "Number1", "VAR"],
        },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_and = {
  init: function () {
    this.jsonInit({
      message0: "%1 " + Blockly.Msg.OPERATORS_AND + " %2",
      args0: [
        { type: "input_value", name: "OPERAND1", check: "Boolean" },
        { type: "input_value", name: "OPERAND2", check: "Boolean" },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_or = {
  init: function () {
    this.jsonInit({
      message0: "%1 " + Blockly.Msg.OPERATORS_OR + " %2",
      args0: [
        { type: "input_value", name: "OPERAND1", check: "Boolean" },
        { type: "input_value", name: "OPERAND2", check: "Boolean" },
      ],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.Blocks.operator_not = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.OPERATORS_NOT + " %1",
      args0: [{ type: "input_value", name: "OPERAND", check: "Boolean" }],
      category: Blockly.Categories.operators,
      extensions: ["colours_operators", "output_boolean"],
    });
  },
};
Blockly.ScratchBlocks.ProcedureUtils = {};
Blockly.ScratchBlocks.ProcedureUtils.callerMutationToDom = function () {
  var a = document.createElement("mutation");
  a.setAttribute("proccode", this.procCode_);
  a.setAttribute("argumentids", JSON.stringify(this.argumentIds_));
  a.setAttribute("warp", JSON.stringify(this.warp_));
  return a;
};
Blockly.ScratchBlocks.ProcedureUtils.callerDomToMutation = function (a) {
  this.procCode_ = a.getAttribute("proccode");
  this.generateShadows_ = JSON.parse(a.getAttribute("generateshadows"));
  this.argumentIds_ = JSON.parse(a.getAttribute("argumentids"));
  this.warp_ = JSON.parse(a.getAttribute("warp"));
  this.updateDisplay_();
};
Blockly.ScratchBlocks.ProcedureUtils.definitionMutationToDom = function (a) {
  var b = document.createElement("mutation");
  a && b.setAttribute("generateshadows", !0);
  b.setAttribute("proccode", this.procCode_);
  b.setAttribute("argumentids", JSON.stringify(this.argumentIds_));
  b.setAttribute("argumentnames", JSON.stringify(this.displayNames_));
  b.setAttribute("argumentdefaults", JSON.stringify(this.argumentDefaults_));
  b.setAttribute("warp", JSON.stringify(this.warp_));
  return b;
};
Blockly.ScratchBlocks.ProcedureUtils.definitionDomToMutation = function (a) {
  this.procCode_ = a.getAttribute("proccode");
  this.warp_ = JSON.parse(a.getAttribute("warp"));
  var b = this.argumentIds_,
    c = this.displayNames_;
  this.argumentIds_ = JSON.parse(a.getAttribute("argumentids"));
  this.displayNames_ = JSON.parse(a.getAttribute("argumentnames"));
  this.argumentDefaults_ = JSON.parse(a.getAttribute("argumentdefaults"));
  this.updateDisplay_();
  this.updateArgumentReporterNames_ && this.updateArgumentReporterNames_(b, c);
};
Blockly.ScratchBlocks.ProcedureUtils.getProcCode = function () {
  return this.procCode_;
};
Blockly.ScratchBlocks.ProcedureUtils.updateDisplay_ = function () {
  var a = this.rendered;
  this.rendered = !1;
  var b = this.disconnectOldBlocks_();
  this.removeAllInputs_();
  this.createAllInputs_(b);
  this.deleteShadows_(b);
  (this.rendered = a) &&
    !this.isInsertionMarker() &&
    (this.initSvg(), this.render());
};
Blockly.ScratchBlocks.ProcedureUtils.disconnectOldBlocks_ = function () {
  for (var a = {}, b = 0, c; (c = this.inputList[b]); b++)
    if (c.connection) {
      var d = c.connection.targetBlock(),
        e = { shadow: c.connection.getShadowDom(), block: d };
      a[c.name] = e;
      c.connection.setShadowDom(null);
      d && c.connection.disconnect();
    }
  return a;
};
Blockly.ScratchBlocks.ProcedureUtils.removeAllInputs_ = function () {
  for (var a = 0, b; (b = this.inputList[a]); a++) b.dispose();
  this.inputList = [];
};
Blockly.ScratchBlocks.ProcedureUtils.createAllInputs_ = function (a) {
  var b = this.procCode_.split(/(?=[^\\]%[nbs])/);
  b = b.map(function (k) {
    return k.trim();
  });
  for (var c = 0, d = 0, e; (e = b[d]); d++) {
    if (e.substring(0, 1) == "%") {
      var f = e.substring(1, 2);
      if (f != "n" && f != "b" && f != "s")
        throw Error("Found an custom procedure with an invalid type: " + f);
      e = e.substring(2).trim();
      var g = this.argumentIds_[c],
        h = this.appendValueInput(g);
      f == "b" && h.setCheck("Boolean");
      this.populateArgument_(f, c, a, g, h);
      c++;
    } else e = e.trim();
    this.addProcedureLabel_(e.replace(/\\%/, "%"));
  }
};
Blockly.ScratchBlocks.ProcedureUtils.deleteShadows_ = function (a) {
  if (a)
    for (var b in a) {
      var c = a[b];
      c && (c = c.block) && c.isShadow() && (c.dispose(), (a[b] = null));
    }
};
Blockly.ScratchBlocks.ProcedureUtils.addLabelField_ = function (a) {
  this.appendDummyInput().appendField(a);
};
Blockly.ScratchBlocks.ProcedureUtils.addLabelEditor_ = function (a) {
  a &&
    this.appendDummyInput(Blockly.utils.genUid()).appendField(
      new Blockly.FieldTextInputRemovable(a)
    );
};
Blockly.ScratchBlocks.ProcedureUtils.buildShadowDom_ = function (a) {
  var b = goog.dom.createDom("shadow");
  if (a == "n") {
    var c = "math_number";
    a = "NUM";
    var d = "1";
  } else (c = "text"), (a = "TEXT"), (d = "");
  b.setAttribute("type", c);
  c = goog.dom.createDom("field", null, d);
  c.setAttribute("name", a);
  b.appendChild(c);
  return b;
};
Blockly.ScratchBlocks.ProcedureUtils.attachShadow_ = function (a, b) {
  if (b == "n" || b == "s") {
    var c = b == "n" ? "math_number" : "text";
    Blockly.Events.disable();
    try {
      var d = this.workspace.newBlock(c);
      b == "n" ? d.setFieldValue("1", "NUM") : d.setFieldValue("", "TEXT");
      d.setShadow(!0);
      this.isInsertionMarker() || (d.initSvg(), d.render(!1));
    } finally {
      Blockly.Events.enable();
    }
    Blockly.Events.isEnabled() &&
      Blockly.Events.fire(new Blockly.Events.BlockCreate(d));
    d.outputConnection.connect(a.connection);
  }
};
Blockly.ScratchBlocks.ProcedureUtils.createArgumentReporter_ = function (a, b) {
  a =
    a == "n" || a == "s"
      ? "argument_reporter_string_number"
      : "argument_reporter_boolean";
  Blockly.Events.disable();
  try {
    var c = this.workspace.newBlock(a);
    c.setShadow(!0);
    c.setFieldValue(b, "VALUE");
    this.isInsertionMarker() || (c.initSvg(), c.render(!1));
  } finally {
    Blockly.Events.enable();
  }
  Blockly.Events.isEnabled() &&
    Blockly.Events.fire(new Blockly.Events.BlockCreate(c));
  return c;
};
Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnCaller_ = function (
  a,
  b,
  c,
  d,
  e
) {
  var f = (b = null);
  c && d in c && ((d = c[d]), (b = d.block), (f = d.shadow));
  c && b
    ? ((c[e.name] = null),
      b.outputConnection.connect(e.connection),
      a != "b" &&
        this.generateShadows_ &&
        ((a = f || this.buildShadowDom_(a)),
        console.log("setting shadow dom: " + a),
        e.connection.setShadowDom(a)))
    : this.generateShadows_ && this.attachShadow_(e, a);
};
Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnPrototype_ = function (
  a,
  b,
  c,
  d,
  e
) {
  var f = null;
  c && d in c && (f = c[d].block);
  d = Blockly.ScratchBlocks.ProcedureUtils.checkOldTypeMatches_(f, a);
  b = this.displayNames_[b];
  c && f && d
    ? ((a = f), a.setFieldValue(b, "VALUE"), (c[e.name] = null))
    : (a = this.createArgumentReporter_(a, b));
  e.connection.connect(a.outputConnection);
};
Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnDeclaration_ = function (
  a,
  b,
  c,
  d,
  e
) {
  var f = null;
  c && d in c && (f = c[d].block);
  d = Blockly.ScratchBlocks.ProcedureUtils.checkOldTypeMatches_(f, a);
  b = this.displayNames_[b];
  f && d
    ? ((a = f), f.setFieldValue(b, "TEXT"), (c[e.name] = null))
    : (a = this.createArgumentEditor_(a, b));
  e.connection.connect(a.outputConnection);
};
Blockly.ScratchBlocks.ProcedureUtils.checkOldTypeMatches_ = function (a, b) {
  return a
    ? ((b == "n" || b == "s") && a.type == "argument_reporter_string_number") ||
      (b == "b" && a.type == "argument_reporter_boolean")
      ? !0
      : !1
    : !1;
};
Blockly.ScratchBlocks.ProcedureUtils.createArgumentEditor_ = function (a, b) {
  Blockly.Events.disable();
  try {
    var c =
      a == "n" || a == "s"
        ? this.workspace.newBlock("argument_editor_string_number")
        : this.workspace.newBlock("argument_editor_boolean");
    c.setFieldValue(b, "TEXT");
    c.setShadow(!0);
    this.isInsertionMarker() || (c.initSvg(), c.render(!1));
  } finally {
    Blockly.Events.enable();
  }
  Blockly.Events.isEnabled() &&
    Blockly.Events.fire(new Blockly.Events.BlockCreate(c));
  return c;
};
Blockly.ScratchBlocks.ProcedureUtils.updateDeclarationProcCode_ = function () {
  this.procCode_ = "";
  this.displayNames_ = [];
  this.argumentIds_ = [];
  for (var a = 0; a < this.inputList.length; a++) {
    a != 0 && (this.procCode_ += " ");
    var b = this.inputList[a];
    if (b.type == Blockly.DUMMY_INPUT)
      this.procCode_ += b.fieldRow[0].getValue();
    else if (b.type == Blockly.INPUT_VALUE) {
      var c = b.connection.targetBlock();
      this.displayNames_.push(c.getFieldValue("TEXT"));
      this.argumentIds_.push(b.name);
      this.procCode_ =
        c.type == "argument_editor_boolean"
          ? this.procCode_ + "%b"
          : this.procCode_ + "%s";
    } else
      throw Error(
        "Unexpected input type on a procedure mutator root: " + b.type
      );
  }
};
Blockly.ScratchBlocks.ProcedureUtils.focusLastEditor_ = function () {
  if (this.inputList.length > 0) {
    var a = this.inputList[this.inputList.length - 1];
    a.type == Blockly.DUMMY_INPUT
      ? a.fieldRow[0].showEditor_()
      : a.type == Blockly.INPUT_VALUE &&
        a.connection.targetBlock().getField("TEXT").showEditor_();
  }
};
Blockly.ScratchBlocks.ProcedureUtils.addLabelExternal = function () {
  Blockly.WidgetDiv.hide(!0);
  this.procCode_ += " label text";
  this.updateDisplay_();
  this.focusLastEditor_();
};
Blockly.ScratchBlocks.ProcedureUtils.addBooleanExternal = function () {
  Blockly.WidgetDiv.hide(!0);
  this.procCode_ += " %b";
  this.displayNames_.push("boolean");
  this.argumentIds_.push(Blockly.utils.genUid());
  this.argumentDefaults_.push("false");
  this.updateDisplay_();
  this.focusLastEditor_();
};
Blockly.ScratchBlocks.ProcedureUtils.addStringNumberExternal = function () {
  Blockly.WidgetDiv.hide(!0);
  this.procCode_ += " %s";
  this.displayNames_.push("number or text");
  this.argumentIds_.push(Blockly.utils.genUid());
  this.argumentDefaults_.push("");
  this.updateDisplay_();
  this.focusLastEditor_();
};
Blockly.ScratchBlocks.ProcedureUtils.getWarp = function () {
  return this.warp_;
};
Blockly.ScratchBlocks.ProcedureUtils.setWarp = function (a) {
  this.warp_ = a;
};
Blockly.ScratchBlocks.ProcedureUtils.removeFieldCallback = function (a) {
  if (this.inputList.length !== 1) {
    for (var b = null, c = 0; c < this.inputList.length; c++) {
      var d = this.inputList[c];
      if (d.connection)
        d.connection.targetBlock().getField(a.name) == a && (b = d.name);
      else
        for (var e = 0; e < d.fieldRow.length; e++)
          d.fieldRow[e] == a && (b = d.name);
    }
    b &&
      (Blockly.WidgetDiv.hide(!0),
      this.removeInput(b),
      this.onChangeFn(),
      this.updateDisplay_());
  }
};
Blockly.ScratchBlocks.ProcedureUtils.removeArgumentCallback_ = function (a) {
  this.parentBlock_ &&
    this.parentBlock_.removeFieldCallback &&
    this.parentBlock_.removeFieldCallback(a);
};
Blockly.ScratchBlocks.ProcedureUtils.updateArgumentReporterNames_ = function (
  a,
  b
) {
  var c = [],
    d = [],
    e = this.getParent();
  if (e) {
    for (var f = e.getDescendants(!1), g = 0; g < f.length; g++)
      (e = f[g]),
        (e.type !== "argument_reporter_string_number" &&
          e.type !== "argument_reporter_boolean") ||
          e.isShadow() ||
          d.push(e);
    for (g = 0; (e = this.argumentIds_[g]); g++)
      if (((e = a.indexOf(e)), e != -1)) {
        var h = b[e];
        h != this.displayNames_[g] &&
          c.push({
            newName: this.displayNames_[g],
            blocks: d.filter(function (k) {
              return k.getFieldValue("VALUE") == h;
            }),
          });
      }
    for (a = 0; (b = c[a]); a++)
      for (d = 0; (e = b.blocks[d]); d++) e.setFieldValue(b.newName, "VALUE");
  }
};
Blockly.Blocks.procedures_definition = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [{ type: "input_statement", name: "custom_block" }],
      extensions: ["shape_hat", "procedure_def_contextmenu"],
      colour: Blockly.Colours.functions.primary,
      colourSecondary: Blockly.Colours.functions.secondary,
      colourTertiary: Blockly.Colours.functions.tertiary,
    });
  },
};
Blockly.Blocks.procedures_call = {
  init: function () {
    this.jsonInit({
      extensions: ["shape_statement", "procedure_call_contextmenu"],
      colour: Blockly.Colours.functions.primary,
      colourSecondary: Blockly.Colours.functions.secondary,
      colourTertiary: Blockly.Colours.functions.tertiary,
    });
    this.procCode_ = "";
    this.argumentIds_ = [];
    this.warp_ = !1;
  },
  getProcCode: Blockly.ScratchBlocks.ProcedureUtils.getProcCode,
  removeAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.removeAllInputs_,
  disconnectOldBlocks_:
    Blockly.ScratchBlocks.ProcedureUtils.disconnectOldBlocks_,
  deleteShadows_: Blockly.ScratchBlocks.ProcedureUtils.deleteShadows_,
  createAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.createAllInputs_,
  updateDisplay_: Blockly.ScratchBlocks.ProcedureUtils.updateDisplay_,
  mutationToDom: Blockly.ScratchBlocks.ProcedureUtils.callerMutationToDom,
  domToMutation: Blockly.ScratchBlocks.ProcedureUtils.callerDomToMutation,
  populateArgument_:
    Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnCaller_,
  addProcedureLabel_: Blockly.ScratchBlocks.ProcedureUtils.addLabelField_,
  attachShadow_: Blockly.ScratchBlocks.ProcedureUtils.attachShadow_,
  buildShadowDom_: Blockly.ScratchBlocks.ProcedureUtils.buildShadowDom_,
};
Blockly.Blocks.procedures_prototype = {
  init: function () {
    this.jsonInit({
      previousStatement: "codeBlock",
      colour: Blockly.Colours.functions.primary,
      colourSecondary: Blockly.Colours.functions.primary,
      colourTertiary: Blockly.Colours.functions.primary,
    });
    this.procCode_ = "";
    this.displayNames_ = [];
    this.argumentIds_ = [];
    this.argumentDefaults_ = [];
    this.warp_ = !1;
  },
  getProcCode: Blockly.ScratchBlocks.ProcedureUtils.getProcCode,
  removeAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.removeAllInputs_,
  disconnectOldBlocks_:
    Blockly.ScratchBlocks.ProcedureUtils.disconnectOldBlocks_,
  deleteShadows_: Blockly.ScratchBlocks.ProcedureUtils.deleteShadows_,
  createAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.createAllInputs_,
  updateDisplay_: Blockly.ScratchBlocks.ProcedureUtils.updateDisplay_,
  mutationToDom: Blockly.ScratchBlocks.ProcedureUtils.definitionMutationToDom,
  domToMutation: Blockly.ScratchBlocks.ProcedureUtils.definitionDomToMutation,
  populateArgument_:
    Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnPrototype_,
  addProcedureLabel_: Blockly.ScratchBlocks.ProcedureUtils.addLabelField_,
  createArgumentReporter_:
    Blockly.ScratchBlocks.ProcedureUtils.createArgumentReporter_,
  updateArgumentReporterNames_:
    Blockly.ScratchBlocks.ProcedureUtils.updateArgumentReporterNames_,
};
Blockly.Blocks.procedures_declaration = {
  init: function () {
    this.jsonInit({ extensions: ["colours_more", "shape_statement"] });
    this.procCode_ = "";
    this.displayNames_ = [];
    this.argumentIds_ = [];
    this.argumentDefaults_ = [];
    this.warp_ = !1;
  },
  getProcCode: Blockly.ScratchBlocks.ProcedureUtils.getProcCode,
  removeAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.removeAllInputs_,
  disconnectOldBlocks_:
    Blockly.ScratchBlocks.ProcedureUtils.disconnectOldBlocks_,
  deleteShadows_: Blockly.ScratchBlocks.ProcedureUtils.deleteShadows_,
  createAllInputs_: Blockly.ScratchBlocks.ProcedureUtils.createAllInputs_,
  updateDisplay_: Blockly.ScratchBlocks.ProcedureUtils.updateDisplay_,
  mutationToDom: Blockly.ScratchBlocks.ProcedureUtils.definitionMutationToDom,
  domToMutation: Blockly.ScratchBlocks.ProcedureUtils.definitionDomToMutation,
  populateArgument_:
    Blockly.ScratchBlocks.ProcedureUtils.populateArgumentOnDeclaration_,
  addProcedureLabel_: Blockly.ScratchBlocks.ProcedureUtils.addLabelEditor_,
  removeFieldCallback: Blockly.ScratchBlocks.ProcedureUtils.removeFieldCallback,
  createArgumentEditor_:
    Blockly.ScratchBlocks.ProcedureUtils.createArgumentEditor_,
  focusLastEditor_: Blockly.ScratchBlocks.ProcedureUtils.focusLastEditor_,
  getWarp: Blockly.ScratchBlocks.ProcedureUtils.getWarp,
  setWarp: Blockly.ScratchBlocks.ProcedureUtils.setWarp,
  addLabelExternal: Blockly.ScratchBlocks.ProcedureUtils.addLabelExternal,
  addBooleanExternal: Blockly.ScratchBlocks.ProcedureUtils.addBooleanExternal,
  addStringNumberExternal:
    Blockly.ScratchBlocks.ProcedureUtils.addStringNumberExternal,
  onChangeFn: Blockly.ScratchBlocks.ProcedureUtils.updateDeclarationProcCode_,
};
Blockly.Blocks.argument_reporter_boolean = {
  init: function () {
    this.jsonInit({
      message0: " %1",
      args0: [{ type: "field_label_serializable", name: "VALUE", text: "" }],
      extensions: ["colours_more", "output_boolean"],
    });
  },
};
Blockly.Blocks.argument_reporter_string_number = {
  init: function () {
    this.jsonInit({
      message0: " %1",
      args0: [{ type: "field_label_serializable", name: "VALUE", text: "" }],
      extensions: ["colours_more", "output_number", "output_string"],
    });
  },
};
Blockly.Blocks.argument_editor_boolean = {
  init: function () {
    this.jsonInit({
      message0: " %1",
      args0: [{ type: "field_input_removable", name: "TEXT", text: "foo" }],
      colour: Blockly.Colours.textField,
      colourSecondary: Blockly.Colours.textField,
      colourTertiary: Blockly.Colours.textField,
      extensions: ["output_boolean"],
    });
  },
  removeFieldCallback:
    Blockly.ScratchBlocks.ProcedureUtils.removeArgumentCallback_,
};
Blockly.Blocks.argument_editor_string_number = {
  init: function () {
    this.jsonInit({
      message0: " %1",
      args0: [{ type: "field_input_removable", name: "TEXT", text: "foo" }],
      colour: Blockly.Colours.textField,
      colourSecondary: Blockly.Colours.textField,
      colourTertiary: Blockly.Colours.textField,
      extensions: ["output_number", "output_string"],
    });
  },
  removeFieldCallback:
    Blockly.ScratchBlocks.ProcedureUtils.removeArgumentCallback_,
};
Blockly.Blocks.sensing = {};
Blockly.Blocks.sensing_TurnLineTrackingLED = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_TURN_LINE_TRACKING_LED + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "SWITCH",
          options: [
            [Blockly.Msg.SENSING_DROPDOWN_ON, "Ed.ON"],
            [Blockly.Msg.SENSING_DROPDOWN_OFF, "Ed.OFF"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "shape_statement"],
    });
  },
};
Blockly.Blocks.sensing_TurnObstacleBeam = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_TURN_OBSTACLE_BEAM + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "SWITCH",
          options: [
            [Blockly.Msg.SENSING_DROPDOWN_ON, "Ed.ON"],
            [Blockly.Msg.SENSING_DROPDOWN_OFF, "Ed.OFF"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "shape_statement"],
    });
  },
};
Blockly.Blocks.sensing_ClearSensor = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_CLEAR + " %1 " + Blockly.Msg.SENSING_SENSOR,
      args0: [
        {
          type: "field_dropdown",
          name: "SWITCH",
          options: [
            [Blockly.Msg.SENSING_CLEAR_DROPDOWN_CLAP, "Ed.ReadClapSensor"],
            [Blockly.Msg.SENSING_CLEAR_DROPDOWN_KEY, "Ed.ReadKeypad"],
            [
              Blockly.Msg.SENSING_CLEAR_DROPDOWN_OBS,
              "Ed.ReadObstacleDetection",
            ],
            [Blockly.Msg.SENSING_CLEAR_DROPDOWN_REMOTE, "Ed.ReadRemote"],
            [Blockly.Msg.SENSING_CLEAR_DROPDOWN_IR, "Ed.ReadIRData"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "shape_statement"],
    });
  },
};
Blockly.Blocks.sensing_ClapDetected = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_CLAP_DETECTED,
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_driveStrained = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_DRIVE_STRAIN,
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_ButtonPressed = {
  init: function () {
    this.jsonInit({
      message0: "%1 " + Blockly.Msg.SENSING_BUTTON_PRESSED,
      args0: [
        {
          type: "field_dropdown",
          name: "BUTTON",
          options: [
            [Blockly.Msg.SENSING_KEY_DROPDOWN_ROUND, "ROUND"],
            [Blockly.Msg.SENSING_KEY_DROPDOWN_TRIANGLE, "TRIANGLE"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_Obstacle = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_OBSTACLE + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "OBS",
          options: [
            [Blockly.Msg.SENSING_OBS_DROPDOWN_ANY, "DETECTED"],
            [Blockly.Msg.SENSING_OBS_DROPDOWN_AHEAD, "AHEAD"],
            [Blockly.Msg.SENSING_OBS_DROPDOWN_LEFT, "LEFT"],
            [Blockly.Msg.SENSING_OBS_DROPDOWN_RIGHT, "RIGHT"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_LineTracker = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.SENSING_LINE_TRACKER +
        " %1 " +
        Blockly.Msg.SENSING_LINE_SURFACE,
      args0: [
        {
          type: "field_dropdown",
          name: "SURFACE",
          options: [
            [Blockly.Msg.SENSING_LINE_DROPDOWN_WHITE, "WHITE"],
            [Blockly.Msg.SENSING_LINE_DROPDOWN_BLACK, "BLACK"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_remote_bool = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.SENSING_REMOTE_BOOL +
        " %1 " +
        Blockly.Msg.SENSING_REMOTE_RECEIVED,
      args0: [
        {
          type: "field_dropdown",
          name: "IRCODE",
          options: [
            ["0", "0"],
            ["1", "1"],
            ["2", "2"],
            ["3", "3"],
            ["4", "4"],
            ["5", "5"],
            ["6", "6"],
            ["7", "7"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_remote_num = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_REMOTE_NUM,
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_number"],
    });
  },
};
Blockly.Blocks.sensing_IRMessage_Detected = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_IR_MESSAGE_DETECTED,
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_boolean"],
    });
  },
};
Blockly.Blocks.sensing_IRmessage = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SENSING_IR_MESSAGE,
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_number"],
    });
  },
};
Blockly.Blocks.sensing_LightLevel = {
  init: function () {
    this.jsonInit({
      message0:
        Blockly.Msg.SENSING_LIGHT_LEVEL +
        " %1 " +
        Blockly.Msg.SENSING_LIGHT_SENSOR,
      args0: [
        {
          type: "field_dropdown",
          name: "Sensor",
          options: [
            [Blockly.Msg.SENSING_LIGHT_DROPDOWN_LEFT, "LeftLightLevel"],
            [Blockly.Msg.SENSING_LIGHT_DROPDOWN_RIGHT, "RightLightLevel"],
            [Blockly.Msg.SENSING_LIGHT_DROPDOWN_LINE, "LineTracker"],
          ],
        },
      ],
      category: Blockly.Categories.sensing,
      extensions: ["colours_sensing", "output_number"],
    });
  },
};
Blockly.Blocks.sound = {};
Blockly.Blocks.sound_sounds_menu = {
  init: function () {
    this.jsonInit({
      message0: "%1",
      args0: [
        {
          type: "field_dropdown",
          name: "SOUND_MENU",
          options: [
            ["1", "0"],
            ["2", "1"],
            ["3", "2"],
            ["4", "3"],
            ["5", "4"],
            ["6", "5"],
            ["7", "6"],
            ["8", "7"],
            ["9", "8"],
            ["10", "9"],
            [
              "call a function",
              function () {
                window.alert("function called!");
              },
            ],
          ],
        },
      ],
      colour: Blockly.Colours.sounds.secondary,
      colourSecondary: Blockly.Colours.sounds.secondary,
      colourTertiary: Blockly.Colours.sounds.tertiary,
      extensions: ["output_string"],
    });
  },
};
Blockly.Blocks.sound_beep = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SOUND_BEEP,
      args0: [],
      category: Blockly.Categories.sound,
      extensions: ["colours_sounds", "shape_statement"],
    });
  },
};
Blockly.Blocks.sound_play_note = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SOUND_PLAY_NOTE + " %1 %2 %3",
      args0: [
        {
          type: "field_dropdown",
          name: "NOTEDURATION",
          options: [
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_DURATION_WHOLE, "1"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_DURATION_HALF, "2"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_DURATION_QUARTER, "4"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_DURATION_EIGHTH, "8"],
          ],
        },
        {
          type: "field_dropdown",
          name: "NOTE",
          options: [
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_C, "o"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_B, "b"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_A, "a"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_G, "g"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_F, "f"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_E, "e"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_D, "d"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_MID_C, "c"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_LOW_B, "n"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_NOTE_REST, "r"],
          ],
        },
        {
          type: "field_dropdown",
          name: "NOTETYPE",
          options: [
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_MOD_NORMAL, "N"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_MOD_SHARP, "SHARP"],
            [Blockly.Msg.SOUND_PLAY_NOTE_DROP_MOD_FLAT, "FLAT"],
          ],
        },
      ],
      category: Blockly.Categories.sound,
      extensions: ["colours_sounds", "shape_statement"],
    });
  },
};
Blockly.Blocks.sound_set_tempo = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SOUND_SET_TEMPO + " %1",
      args0: [
        {
          type: "field_dropdown",
          name: "TEMPO",
          options: [
            [Blockly.Msg.SOUND_SET_TEMPO_DROP_VERY_SLOW, "Ed.TEMPO_VERY_SLOW"],
            [Blockly.Msg.SOUND_SET_TEMPO_DROP_SLOW, "Ed.TEMPO_SLOW"],
            [Blockly.Msg.SOUND_SET_TEMPO_DROP_MEDIUM, "Ed.TEMPO_MEDIUM"],
            [Blockly.Msg.SOUND_SET_TEMPO_DROP_FAST, "Ed.TEMPO_FAST"],
            [Blockly.Msg.SOUND_SET_TEMPO_DROP_VERY_FAST, "Ed.TEMPO_VERY_FAST"],
          ],
        },
      ],
      category: Blockly.Categories.sound,
      extensions: ["colours_sounds", "shape_statement"],
    });
  },
};
Blockly.Blocks.sound_PlayinBackground = {
  init: function () {
    this.jsonInit({
      message0: Blockly.Msg.SOUND_PLAY_IN_BACKGROUND,
      message1: "%1",
      args1: [{ type: "input_statement", name: "SUBSTACK" }],
      category: Blockly.Categories.sound,
      extensions: ["colours_sounds", "shape_statement"],
    });
  },
};
