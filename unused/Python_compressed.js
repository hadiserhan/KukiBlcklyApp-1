// Do not edit this file; automatically generated by build.py.
"use strict";

"use strict";
Blockly.Python = new Blockly.Generator("Python");
Blockly.Python.addReservedWords(
  "False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip"
);
Blockly.Python.ORDER_ATOMIC = 0;
Blockly.Python.ORDER_COLLECTION = 1;
Blockly.Python.ORDER_STRING_CONVERSION = 1;
Blockly.Python.ORDER_MEMBER = 2.1;
Blockly.Python.ORDER_FUNCTION_CALL = 2.2;
Blockly.Python.ORDER_EXPONENTIATION = 3;
Blockly.Python.ORDER_UNARY_SIGN = 4;
Blockly.Python.ORDER_BITWISE_NOT = 4;
Blockly.Python.ORDER_MULTIPLICATIVE = 5;
Blockly.Python.ORDER_ADDITIVE = 6;
Blockly.Python.ORDER_BITWISE_SHIFT = 7;
Blockly.Python.ORDER_BITWISE_AND = 8;
Blockly.Python.ORDER_BITWISE_XOR = 9;
Blockly.Python.ORDER_BITWISE_OR = 10;
Blockly.Python.ORDER_RELATIONAL = 11;
Blockly.Python.ORDER_LOGICAL_NOT = 12;
Blockly.Python.ORDER_LOGICAL_AND = 13;
Blockly.Python.ORDER_LOGICAL_OR = 14;
Blockly.Python.ORDER_CONDITIONAL = 15;
Blockly.Python.ORDER_LAMBDA = 16;
Blockly.Python.ORDER_NONE = 99;
Blockly.Python.ORDER_OVERRIDES = [
  [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_MEMBER],
  [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_FUNCTION_CALL],
  [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_MEMBER],
  [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_FUNCTION_CALL],
  [Blockly.Python.ORDER_LOGICAL_NOT, Blockly.Python.ORDER_LOGICAL_NOT],
  [Blockly.Python.ORDER_LOGICAL_AND, Blockly.Python.ORDER_LOGICAL_AND],
  [Blockly.Python.ORDER_LOGICAL_OR, Blockly.Python.ORDER_LOGICAL_OR],
];
Blockly.Python.init = function (a) {
  Blockly.Python.PASS = this.INDENT + "pass\n";
  Blockly.Python.definitions_ = Object.create(null);
  Blockly.Python.functionNames_ = Object.create(null);
  Blockly.Python.variableDB_
    ? Blockly.Python.variableDB_.reset()
    : (Blockly.Python.variableDB_ = new Blockly.Names(
        Blockly.Python.RESERVED_WORDS_
      ));
  Blockly.Python.definitions_.variables = "";
  Blockly.Python.definitions_.MotorDistUnits = "seconds";
  Blockly.Python.definitions_.currentIndent = "";
  Blockly.Python.definitions_.currentSpeed = "7";
  Blockly.Python.definitions_.driving = !1;
  Blockly.Python.definitions_.lineTrackOn = !1;
  Blockly.Python.definitions_.nextNoteSharp = !1;
  Blockly.Python.definitions_.MusicUsed = !1;
  Blockly.Python.definitions_.musicStackFlag = !1;
  Blockly.Python.definitions_.musicStackString = "";
  Blockly.Python.definitions_.loopVar = 0;
  Blockly.Python.definitions_.inObsLoop = !1;
  Blockly.Python.definitions_.clapUsed = !1;
  Blockly.Python.definitions_.clapUsedEvent = !1;
  Blockly.Python.definitions_.eventUsed = !1;
  Blockly.Python.definitions_.inEvent = !1;
  Blockly.Python.definitions_.driveInEvent = !1;
  Blockly.Python.definitions_.speedChangeInEvent = !1;
  Blockly.Python.definitions_.inLineSpeedtoUse = "5";
  Blockly.Python.definitions_.lastUsedDriveUnits = "";
  Blockly.Python.definitions_.Header =
    "#-------DO NOT MODIFY AUTOMATICALLY GENERATED FOR Kuki V3-------\n#-------------Setup----------------\n\nimport Ed\n\nEd.KukiVersion = Ed.V3\n\n#Ed.Tempo place hold\n\n#---------edblocks vars------------\n";
  a = a.getTopBlocks();
  for (var b = 0, d; (d = a[b]); b++)
    d.type.includes("new_event_clap_") &&
      (Blockly.Python.definitions_.clapUsedEvent = !0);
};
Blockly.Python.finish = function (a) {
  Blockly.Python.definitions_.clapUsed &&
    (a = a.replace(
      "#start blocks \n",
      "#start blocks \nEd.TimeWait(200, Ed.TIME_MILLISECONDS)\nEd.ReadClapSensor()\n"
    ));
  Blockly.Python.definitions_.MusicUsed &&
    (Blockly.Python.definitions_.Header =
      Blockly.Python.definitions_.Header.replace(
        "#Ed.Tempo place hold",
        "Ed.Tempo = Ed.TEMPO_MEDIUM"
      ));
  Blockly.Python.definitions_.Header += "#---------gerated code-------------\n";
  a = Blockly.Python.definitions_.Header + a;
  delete Blockly.Python.definitions_;
  delete Blockly.Python.functionNames_;
  Blockly.Python.variableDB_.reset();
  return a;
};
Blockly.Python.scrubNakedValue = function (a) {
  return a + "\n";
};
Blockly.Python.quote_ = function (a) {
  a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/%/g, "\\%");
  var b = "'";
  -1 !== a.indexOf("'") &&
    (-1 === a.indexOf('"') ? (b = '"') : (a = a.replace(/'/g, "\\'")));
  return b + a + b;
};
Blockly.Python.scrub_ = function (a, b) {
  var d = "";
  if (!a.outputConnection || !a.outputConnection.targetConnection) {
    var c = a.getCommentText();
    (c = Blockly.utils.wrap(c, Blockly.Python.COMMENT_WRAP - 3)) &&
      (d = a.getProcedureDef
        ? d + ('"""' + c + '\n"""\n')
        : d + Blockly.Python.prefixLines(c + "\n", "# "));
    for (var e = 0; e < a.inputList.length; e++)
      a.inputList[e].type == Blockly.INPUT_VALUE &&
        (c = a.inputList[e].connection.targetBlock()) &&
        (c = Blockly.Python.allNestedComments(c)) &&
        (d += Blockly.Python.prefixLines(c, "# "));
  }
  a = a.nextConnection && a.nextConnection.targetBlock();
  a = Blockly.Python.blockToCode(a);
  return d + b + a;
};
Blockly.Python.getAdjustedInt = function (a, b, d, c) {
  d = d || 0;
  a.workspace.options.oneBasedIndex && d--;
  var e = a.workspace.options.oneBasedIndex ? "1" : "0";
  a =
    Blockly.Python.valueToCode(
      a,
      b,
      d ? Blockly.Python.ORDER_ADDITIVE : Blockly.Python.ORDER_NONE
    ) || e;
  Blockly.isNumber(a)
    ? ((a = parseInt(a, 10) + d), c && (a = -a))
    : ((a =
        0 < d
          ? "int(" + a + " + " + d + ")"
          : 0 > d
          ? "int(" + a + " - " + -d + ")"
          : "int(" + a + ")"),
      c && (a = "-" + a));
  return a;
};
Blockly.Python.Control = {};
Blockly.Python.control_loop_forever = function (a) {
  a = Blockly.Python.statementToCode(a, "SUBSTACK");
  "" == a && (a = "\tpass\n");
  return "#loop forever \nwhile True:\n" + a;
};
Blockly.Python.control_loop_number = function (a) {
  var b = "i" + Blockly.Python.definitions_.loopVar,
    d = Blockly.Python.valueToCode(a, "TIMES", Blockly.Python.ORDER_ATOMIC);
  Blockly.Python.definitions_.loopVar += 1;
  a = Blockly.Python.statementToCode(a, "SUBSTACK");
  --Blockly.Python.definitions_.loopVar;
  "" == a && (a = "\tpass\n");
  return "#loop a number of times \nfor " + b + " in range(" + d + "):\n" + a;
};
Blockly.Python.dropdown_control_setloop_event = function (a) {
  a = a.getFieldValue("CHOICE");
  return [
    "circle" == a
      ? "Ed.ReadKeypad() != Ed.KEYPAD_ROUND"
      : "Ed.ReadKeypad() != Ed.KEYPAD_TRIANGLE",
    Blockly.Python.ORDER_ATOMIC,
  ];
};
Blockly.Python.control_loop_event = function (a) {
  var b = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  a = Blockly.Python.statementToCode(a, "SUBSTACK");
  "" == a && (a = "\tpass\n");
  return "#loop until button \nwhile " + b + ":\n" + a;
};
Blockly.Python.control_loop_event_obstacle = function (a) {
  var b = Blockly.Python.definitions_.inObsLoop;
  Blockly.Python.definitions_.inObsLoop = !0;
  a = Blockly.Python.statementToCode(a, "SUBSTACK");
  Blockly.Python.definitions_.inObsLoop = b;
  "" == a && (a = "\tpass\n");
  b = "";
  0 == Blockly.Python.definitions_.inObsLoop &&
    (b = "Ed.ObstacleDetectionBeam(Ed.OFF)\n");
  return (
    "#loop until obs \nEd.ObstacleDetectionBeam(Ed.ON)\nwhile Ed.ReadObstacleDetection() <= Ed.OBSTACLE_NONE:\n" +
    a +
    b
  );
};
Blockly.Python.control_stop = function (a) {
  return "#end of code \nEd.Exit()\n";
};
Blockly.Python.control_wait_time = function (a) {
  var b = "#wait for time\n";
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  return (b =
    b +
    Blockly.Python.definitions_.currentIndent +
    "Ed.TimeWait(" +
    1e3 * a +
    ",Ed.TIME_MILLISECONDS)\n");
};
Blockly.Python.dropdown_control_setwait_event = function (a) {
  a = a.getFieldValue("CHOICE");
  console.log(a);
  switch (a) {
    case "clap":
      Blockly.Python.definitions_.clapUsed = !0;
      a = "Ed.ReadClapSensor()!=Ed.CLAP_DETECTED";
      break;
    case "circle":
      a = "Ed.ReadKeypad()!=Ed.KEYPAD_ROUND";
      break;
    case "triangle":
      a = "Ed.ReadKeypad()!=Ed.KEYPAD_TRIANGLE";
      break;
    case "clapTwo":
      Blockly.Python.definitions_.clapUsed = !0;
      break;
    case "black":
      a = "Ed.ReadLineState()!=Ed.LINE_ON_BLACK";
      Blockly.Python.definitions_.lineTrackOn ||
        ((Blockly.Python.definitions_.lineTrackOn = !0),
        (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
      break;
    case "white":
      a = "Ed.ReadLineState()!=Ed.LINE_ON_WHITE";
      0 == Blockly.Python.definitions_.lineTrackOn &&
        ((Blockly.Python.definitions_.lineTrackOn = !0),
        (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
      break;
    case "left":
      a = "Ed.ReadLeftLightLevel()<=Ed.ReadRightLightLevel()";
      break;
    case "right":
      a = "Ed.ReadLeftLightLevel()>=Ed.ReadRightLightLevel()";
  }
  return [a, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.control_wait_event = function (a) {
  var b = "#wait until event \n",
    d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  ("clapTwo" != d && "Ed.ReadClapSensor()!=Ed.CLAP_DETECTED" != d) ||
    !a.getPreviousBlock().type.includes("drive") ||
    (console.log("Drive before clap"),
    (b += "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadClapSensor()\n"));
  return "clapTwo" == d
    ? b +
        "noClaps=True\nEd.ReadClapSensor()\nwhile noClaps:\n\twhile Ed.ReadClapSensor()!=Ed.CLAP_DETECTED:\n\t\tpass\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadClapSensor()\n\tEd.TimeWait(350, Ed.TIME_MILLISECONDS)\n\tif Ed.ReadClapSensor()==Ed.CLAP_DETECTED:\n\t\tnoClaps=False\n"
    : b + "Ed.TimeWait(200, Ed.TIME_MILLISECONDS)\nwhile " + d + ":\n\tpass\n";
};
Blockly.Python.control_wait_event_obstacle = function (a) {
  a = "";
  0 == Blockly.Python.definitions_.inObsLoop &&
    (a = "Ed.ObstacleDetectionBeam(Ed.OFF)\n");
  return (
    "#wait until obstacle \nEd.ObstacleDetectionBeam(Ed.ON)\nwhile Ed.ReadObstacleDetection() != Ed.OBSTACLE_AHEAD:\n\tpass\n" +
    a
  );
};
Blockly.Python.dropdown_control_setwait_message = function (a) {
  return [a.getFieldValue("CHOICE"), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.control_wait_message = function (a) {
  return (
    "#wait until message \nwhile Ed.ReadIRData()!=" +
    Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC) +
    ":\n\tpass\n"
  );
};
Blockly.Python.dropdown_control_set_message = function (a) {
  return [a.getFieldValue("CHOICE"), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.control_send_message = function (a) {
  return (
    "#send message \nEd.SendIRData(" +
    Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC) +
    ")\n"
  );
};
Blockly.Python.Drive = {};
function driveDropDownToBool(a) {
  switch (a) {
    case "left":
      a = "Ed.ReadLeftLightLevel()>Ed.ReadRightLightLevel()";
      break;
    case "right":
      a = "Ed.ReadLeftLightLevel()<Ed.ReadRightLightLevel()";
      break;
    case "white":
      a = "Ed.ReadLineState()==Ed.LINE_ON_WHITE";
      0 == Blockly.Python.definitions_.lineTrackOn &&
        ((Blockly.Python.definitions_.lineTrackOn = !0),
        (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
      break;
    case "black":
      (a = "Ed.ReadLineState()==Ed.LINE_ON_BLACK"),
        Blockly.Python.definitions_.lineTrackOn ||
          ((Blockly.Python.definitions_.lineTrackOn = !0),
          (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  }
  return a;
}
function checkForDriveSpeedVar() {
  0 == Blockly.Python.definitions_.driving &&
    Blockly.Python.definitions_.speedChangeInEvent &&
    ((Blockly.Python.definitions_.Header += "DS = 5\n"),
    (Blockly.Python.definitions_.driving = !0));
}
function drivePreambleChecks() {
  var a = !1;
  Blockly.Python.definitions_.eventUsed &&
    (Blockly.Python.definitions_.inEvent
      ? (a = Blockly.Python.definitions_.driveInEvent = !0)
      : Blockly.Python.definitions_.driveInEvent && (a = !0));
  return a;
}
Blockly.Python.drive_forwards_time = function (a) {
  checkForDriveSpeedVar();
  var b = "#drive forwards for time\n",
    d = "",
    c = Blockly.Python.definitions_.inLineSpeedtoUse;
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  a *= 1e3;
  "Ed.TIME" != Blockly.Python.definitions_.lastUsedDriveUnits &&
    ((Blockly.Python.definitions_.lastUsedDriveUnits = "Ed.TIME"),
    (d = "Ed.DistanceUnits = Ed.TIME\n"));
  drivePreambleChecks() && (d = "Ed.DistanceUnits = Ed.TIME\n");
  Blockly.Python.definitions_.speedChangeInEvent && (c = "DS");
  return (b =
    b +
    d +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Drive(Ed.FORWARD, " +
    c +
    ", " +
    a +
    ")\n");
};
Blockly.Python.drive_backwards_time = function (a) {
  checkForDriveSpeedVar();
  var b = "#drive Backwards for time\n",
    d = "",
    c = Blockly.Python.definitions_.inLineSpeedtoUse;
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  a *= 1e3;
  "Ed.TIME" != Blockly.Python.definitions_.lastUsedDriveUnits &&
    ((Blockly.Python.definitions_.lastUsedDriveUnits = "Ed.TIME"),
    (d = "Ed.DistanceUnits = Ed.TIME\n"));
  drivePreambleChecks() && (d = "Ed.DistanceUnits = Ed.TIME\n");
  Blockly.Python.definitions_.speedChangeInEvent && (c = "DS");
  return (b =
    b +
    d +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Drive(Ed.BACKWARD, " +
    c +
    ", " +
    a +
    ")\n");
};
Blockly.Python.drive_left_angle = function (a) {
  checkForDriveSpeedVar();
  var b = "#drive left for angle\n",
    d = "",
    c = Blockly.Python.definitions_.inLineSpeedtoUse;
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  "Ed.CM" != Blockly.Python.definitions_.lastUsedDriveUnits &&
    ((Blockly.Python.definitions_.lastUsedDriveUnits = "Ed.CM"),
    (d = "Ed.DistanceUnits = Ed.CM\n"));
  drivePreambleChecks() && (d = "Ed.DistanceUnits = Ed.CM\n");
  Blockly.Python.definitions_.speedChangeInEvent && (c = "DS");
  return (b =
    b +
    d +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Drive(Ed.FORWARD_LEFT, " +
    c +
    ", " +
    a +
    ")\n");
};
Blockly.Python.drive_right_angle = function (a) {
  checkForDriveSpeedVar();
  var b = "#drive right for angle\n",
    d = "",
    c = Blockly.Python.definitions_.inLineSpeedtoUse;
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  "Ed.CM" != Blockly.Python.definitions_.lastUsedDriveUnits &&
    ((Blockly.Python.definitions_.lastUsedDriveUnits = "Ed.CM"),
    (d = "Ed.DistanceUnits = Ed.CM\n"));
  drivePreambleChecks() && (d = "Ed.DistanceUnits = Ed.CM\n");
  Blockly.Python.definitions_.speedChangeInEvent && (c = "DS");
  return (b =
    b +
    d +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Drive(Ed.FORWARD_RIGHT, " +
    c +
    ", " +
    a +
    ")\n");
};
Blockly.Python.drive_line_tracking_time = function (a) {
  a = Blockly.Python.valueToCode(a, "DURATION", Blockly.Python.ORDER_ATOMIC);
  Blockly.Python.definitions_.lineTrackOn ||
    ((Blockly.Python.definitions_.lineTrackOn = !0),
    (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  var b = Blockly.Python.definitions_.currentIndent;
  return (
    "#Line track for time\n" +
    b +
    "Ed.StartCountDown(" +
    1e3 * a +
    ", Ed.TIME_MILLISECONDS)\n" +
    b +
    "while Ed.ReadCountDown(Ed.TIME_MILLISECONDS) !=0:\n" +
    b +
    "\tif Ed.ReadLineState()==Ed.LINE_ON_WHITE:\n" +
    b +
    "\t\tEd.Drive(Ed.FORWARD_RIGHT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    b +
    "\telse:\n" +
    b +
    "\t\tEd.Drive(Ed.FORWARD_LEFT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    b +
    "Ed.LineTrackerLed(Ed.OFF)\n"
  );
};
Blockly.Python.drive_stop = function (a) {
  return (
    "#drive stop\n" +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Drive(Ed.STOP, 0, 0)\n"
  );
};
Blockly.Python.dropdown_drive_setforwards_event = function (a) {
  a = a.getFieldValue("CHOICE");
  return [driveDropDownToBool(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.drive_forwards_event = function (a) {
  checkForDriveSpeedVar();
  var b = Blockly.Python.definitions_.inLineSpeedtoUse,
    d = "#drive forwards whileEvent\n";
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var c = Blockly.Python.definitions_.currentIndent;
  Blockly.Python.definitions_.speedChangeInEvent && (b = "DS");
  d = d + c + "Ed.Drive(Ed.FORWARD, " + b + ", Ed.DISTANCE_UNLIMITED)\n";
  "infinite" != a &&
    (d =
      d +
      c +
      "while " +
      a +
      ":\n" +
      c +
      "\tpass\n" +
      c +
      "Ed.Drive(Ed.STOP, 0, 0)\n");
  return d;
};
Blockly.Python.dropdown_drive_setbackwards_event = function (a) {
  a = a.getFieldValue("CHOICE");
  return [driveDropDownToBool(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.drive_backwards_event = function (a) {
  checkForDriveSpeedVar();
  var b = Blockly.Python.definitions_.inLineSpeedtoUse,
    d = "#drive backwards while Event\n";
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var c = Blockly.Python.definitions_.currentIndent;
  Blockly.Python.definitions_.speedChangeInEvent && (b = "DS");
  d = d + c + "Ed.Drive(Ed.BACKWARD, " + b + ", Ed.DISTANCE_UNLIMITED)\n";
  "infinite" != a &&
    (d =
      d +
      c +
      "while " +
      a +
      ":\n" +
      c +
      "\tpass\n" +
      c +
      "Ed.Drive(Ed.STOP, 0, 0);\n");
  return d;
};
Blockly.Python.dropdown_drive_setleft_event = function (a) {
  a = a.getFieldValue("CHOICE");
  return [driveDropDownToBool(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.drive_left_event = function (a) {
  checkForDriveSpeedVar();
  var b = Blockly.Python.definitions_.inLineSpeedtoUse,
    d = "#drive left while Event\n";
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var c = Blockly.Python.definitions_.currentIndent;
  Blockly.Python.definitions_.speedChangeInEvent && (b = "DS");
  d = d + c + "Ed.Drive(Ed.FORWARD_LEFT, " + b + ", Ed.DISTANCE_UNLIMITED)\n";
  "infinite" != a &&
    (d =
      d +
      c +
      "while " +
      a +
      ":\n" +
      c +
      "\tpass\n" +
      c +
      "Ed.Drive(Ed.STOP, 0, 0);\n");
  return d;
};
Blockly.Python.dropdown_drive_setright_event = function (a) {
  a = a.getFieldValue("CHOICE");
  return [driveDropDownToBool(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.drive_right_event = function (a) {
  checkForDriveSpeedVar();
  var b = "#drive right while Event\n",
    d = Blockly.Python.definitions_.inLineSpeedtoUse;
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var c = Blockly.Python.definitions_.currentIndent;
  Blockly.Python.definitions_.speedChangeInEvent && (d = "DS");
  b = b + c + "Ed.Drive(Ed.FORWARD_RIGHT, " + d + ", Ed.DISTANCE_UNLIMITED)\n";
  "infinite" != a &&
    (b =
      b +
      c +
      "while " +
      a +
      ":\n" +
      c +
      "\tpass\n" +
      c +
      "Ed.Drive(Ed.STOP, 0, 0);\n");
  return b;
};
Blockly.Python.drive_line_tracking_obstacle = function (a) {
  Blockly.Python.definitions_.lineTrackOn ||
    ((Blockly.Python.definitions_.lineTrackOn = !0),
    (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  a = "";
  0 == Blockly.Python.definitions_.inObsLoop &&
    (a = "Ed.ObstacleDetectionBeam(Ed.OFF)");
  var b = Blockly.Python.definitions_.currentIndent;
  return (
    "#Line track until obstacle\n" +
    b +
    "Ed.ObstacleDetectionBeam(Ed.ON)\n" +
    b +
    "while Ed.ReadObstacleDetection() == Ed.OBSTACLE_NONE:\n" +
    b +
    "\tif Ed.ReadLineState()==Ed.LINE_ON_WHITE:\n" +
    b +
    "\t\tEd.Drive(Ed.FORWARD_RIGHT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    b +
    "\telse:\n" +
    b +
    "\t\tEd.Drive(Ed.FORWARD_LEFT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    b +
    "Ed.LineTrackerLed(Ed.OFF)\n" +
    b +
    a +
    "\n"
  );
};
Blockly.Python.drive_line_tracking_infinite = function (a) {
  Blockly.Python.definitions_.lineTrackOn ||
    ((Blockly.Python.definitions_.lineTrackOn = !0),
    (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  a = Blockly.Python.definitions_.currentIndent;
  return (
    "#Line track forever\n" +
    a +
    "while True:\n" +
    a +
    "\tif Ed.ReadLineState()==Ed.LINE_ON_WHITE:\n" +
    a +
    "\t\tEd.Drive(Ed.FORWARD_RIGHT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    a +
    "\telse:\n" +
    a +
    "\t\tEd.Drive(Ed.FORWARD_LEFT, Ed.SPEED_1, Ed.DISTANCE_UNLIMITED)\n" +
    a +
    "Ed.LineTrackerLed(Ed.OFF)\n"
  );
};
Blockly.Python.dropdown_drive_setspeed = function (a) {
  return [a.getFieldValue("CHOICE"), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.drive_speed = function (a) {
  checkForDriveSpeedVar();
  Blockly.Python.definitions_.inEvent &&
    (Blockly.Python.definitions_.speedChangeInEvent = !0);
  var b = "#drive set speed\n";
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var d = Blockly.Python.definitions_.currentIndent;
  Blockly.Python.definitions_.speedChangeInEvent
    ? (b = b + d + "DS = " + a + "\n")
    : (Blockly.Python.definitions_.inLineSpeedtoUse = a);
  return b;
};
Blockly.Python.Events = {};
Blockly.Python.new_event_start = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  Blockly.Python.definitions_.inEvent = !1;
  Blockly.Python.definitions_.lastUsedDriveUnits = "";
  return "#start blocks \nwhile True:\n\tpass";
};
function checkForEventUsedVar() {
  0 == Blockly.Python.definitions_.eventUsed &&
    ((Blockly.Python.definitions_.eventUsed = !0),
    (Blockly.Python.definitions_.inEvent = !0));
}
Blockly.Python.new_event_obstacle = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  Blockly.Python.definitions_.Header += "Ed.ObstacleDetectionBeam(Ed.ON)\n";
  return "Ed.RegisterEventHandler(Ed.EVENT_OBSTACLE_ANY, 'if1')\n#obstacle detected event \ndef if1():\nEd.RegisterEventHandler(Ed.EVENT_OBSTACLE_AHEAD, None)\nEd.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadObstacleDetection()\n";
};
Blockly.Python.new_event_clap_one = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  Blockly.Python.definitions_.clapUsed = !0;
  Blockly.Python.definitions_.clapUsedEvent = !0;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n#new clap event \ndef if2():\n\tEd.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadClapSensor()\n\t#clap one event\n";
};
Blockly.Python.new_event_clap_two = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  Blockly.Python.definitions_.clapUsed = !0;
  Blockly.Python.definitions_.clapUsedEvent = !0;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n#new clap event \ndef if2():\n\tEd.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadClapSensor()\n\tEd.TimeWait(350, Ed.TIME_MILLISECONDS)\n\tif Ed.ReadClapSensor() == Ed.CLAP_DETECTED:\n\t\t#clap two event\n\telse:\n";
};
Blockly.Python.new_event_message_1 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 1 event \nif internalIRdata == 1:\n";
};
Blockly.Python.new_event_message_2 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 2 event \nif internalIRdata == 2:\n";
};
Blockly.Python.new_event_message_3 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 3 event \nif internalIRdata == 3:\n";
};
Blockly.Python.new_event_message_4 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 4 event \nif internalIRdata == 4:\n";
};
Blockly.Python.new_event_message_5 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 5 event \nif internalIRdata == 5:\n";
};
Blockly.Python.new_event_message_6 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_IR_DATA, 'if3')\n#new message event \ndef if3():\n\tinternalIRdata = Ed.ReadIRData()\n\tEd.RegisterEventHandler(Ed.EVENT_IR_DATA, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadIRData()\n#IR message 6 event \nif internalIRdata == 6:\n";
};
Blockly.Python.new_event_key_triangle = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_KEYPAD_TRIANGLE, 'if4')\n#triangle button event \ndef if4():\nEd.RegisterEventHandler(Ed.EVENT_KEYPAD_TRIANGLE, None)\nEd.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadKeypad()\n";
};
Blockly.Python.new_event_key_circle = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_KEYPAD_ROUND, 'if5')\n#circle button event \ndef if5():\nEd.RegisterEventHandler(Ed.EVENT_KEYPAD_ROUND, None)\nEd.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadKeypad()\n";
};
Blockly.Python.new_event_line_on_white = function (a) {
  Blockly.Python.definitions_.lineTrackOn ||
    ((Blockly.Python.definitions_.lineTrackOn = !0),
    (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  checkForEventUsedVar();
  Blockly.Python.definitions_.nextNoteSharp = !1;
  return "Ed.RegisterEventHandler(Ed.EVENT_LINE_TRACKER_ON_WHITE, 'if6')\n#Line on white event  \ndef if6():\nEd.RegisterEventHandler(Ed.EVENT_LINE_TRACKER_ON_WHITE, None)\nEd.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadLineState()\n";
};
Blockly.Python.new_event_line_on_black = function (a) {
  Blockly.Python.definitions_.lineTrackOn ||
    ((Blockly.Python.definitions_.lineTrackOn = !0),
    (Blockly.Python.definitions_.Header += "Ed.LineTrackerLed(Ed.ON)\n"));
  checkForEventUsedVar();
  Blockly.Python.definitions_.nextNoteSharp = !1;
  return "Ed.RegisterEventHandler(Ed.EVENT_LINE_TRACKER_ON_BLACK, 'if7')\n#Line on black event  \ndef if7():\nEd.RegisterEventHandler(Ed.EVENT_LINE_TRACKER_ON_BLACK, None)\nEd.TimeWait(150, Ed.TIME_MILLISECONDS)\nEd.ReadLineState()\n";
};
Blockly.Python.new_event_remote_code_1 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 1 event  \nif internalRemotedata == 1:\n";
};
Blockly.Python.new_event_remote_code_2 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 2 event  \nif internalRemotedata == 2:\n";
};
Blockly.Python.new_event_remote_code_3 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 3 event  \nif internalRemotedata == 3:\n";
};
Blockly.Python.new_event_remote_code_4 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 4 event  \nif internalRemotedata == 4:\n";
};
Blockly.Python.new_event_remote_code_5 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 5 event  \nif internalRemotedata == 5:\n";
};
Blockly.Python.new_event_remote_code_6 = function (a) {
  Blockly.Python.definitions_.nextNoteSharp = !1;
  checkForEventUsedVar();
  return "Ed.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, 'if8')\n#new remote event \ndef if8():\n\tinternalRemotedata = Ed.ReadRemote()\n\tEd.RegisterEventHandler(Ed.EVENT_REMOTE_CODE, None)\n\tEd.TimeWait(150, Ed.TIME_MILLISECONDS)\n\tEd.ReadRemote()\n#Remote message 6 event  \nif internalRemotedata == 6:\n";
};
Blockly.Python.LightsSound = {};
function soundDropDownToNote(a) {
  var b = "";
  if (1 == Blockly.Python.definitions_.nextNoteSharp) {
    switch (a) {
      case "Chigh":
        b = "o";
        break;
      case "Bhigh":
        b = "o";
        break;
      case "A":
        b = "A";
        break;
      case "G":
        b = "G";
        break;
      case "F":
        b = "F";
        break;
      case "E":
        b = "f";
        break;
      case "D":
        b = "D";
        break;
      case "C":
        b = "C";
        break;
      case "B":
        b = "c";
    }
    Blockly.Python.definitions_.nextNoteSharp = !1;
  } else
    switch (a) {
      case "Chigh":
        b = "o";
        break;
      case "Bhigh":
        b = "b";
        break;
      case "A":
        b = "a";
        break;
      case "G":
        b = "g";
        break;
      case "F":
        b = "f";
        break;
      case "E":
        b = "e";
        break;
      case "D":
        b = "d";
        break;
      case "C":
        b = "c";
        break;
      case "B":
        b = "n";
    }
  return b;
}
Blockly.Python.dropdown_light_sound_LED = function (a) {
  return [a.getFieldValue("CHOICE"), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_LED = function (a) {
  var b = "#set LEDs\n";
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  var d = Blockly.Python.definitions_.currentIndent;
  switch (a) {
    case "bothOn":
      b = b + d + "Ed.LeftLed(Ed.ON)\n" + d + "Ed.RightLed(Ed.ON)\n";
      break;
    case "rightOn":
      b = b + d + "Ed.RightLed(Ed.ON)\n";
      break;
    case "leftOn":
      b = b + d + "Ed.LeftLed(Ed.ON)\n";
      break;
    case "bothOff":
      b = b + d + "Ed.LeftLed(Ed.OFF)\n" + d + "Ed.RightLed(Ed.OFF)\n";
      break;
    case "rightOff":
      b = b + d + "Ed.RightLed(Ed.OFF)\n";
      break;
    case "leftOff":
      b = b + d + "Ed.LeftLed(Ed.OFF)\n";
  }
  return b;
};
Blockly.Python.light_sound_beep = function (a) {
  var b = "Ed.TimeWait(125,Ed.TIME_MILLISECONDS) \n",
    d = Blockly.Python.definitions_.currentIndent;
  if (null != a.getNextBlock()) {
    var c = a.getNextBlock().type;
    console.log(c);
    if (
      (c.includes("drive") && "drive_stop" != c && "drive_speed" != c) ||
      c.includes("_wait_")
    )
      b = "";
  }
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (b =
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        d +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        d +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  return "#BEEEEEEP!\n" + d + "Ed.PlayBeep()\n" + d + b;
};
Blockly.Python.dropdown_light_sound_play_whole = function (a) {
  a = a.getFieldValue("CHOICE");
  return [soundDropDownToNote(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_play_whole = function (a) {
  var b = "#Play whole note\n";
  Blockly.Python.definitions_.MusicUsed = !0;
  var d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC),
    c = Blockly.Python.definitions_.currentIndent,
    e = Blockly.Python.definitions_.musicStackFlag,
    f = a.nextConnection.targetBlock(),
    g = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (g =
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        c +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  null != f
    ? f.type.includes("light_sound_play_") ||
      "light_sound_rest" == f.type ||
      "light_sound_note_sharp" == f.type
      ? ((Blockly.Python.definitions_.musicStackFlag = !0),
        (Blockly.Python.definitions_.musicStackString =
          Blockly.Python.definitions_.musicStackString + d + "1"),
        (b = "#Play note stacked\n"))
      : (e
          ? ((Blockly.Python.definitions_.musicStackString =
              Blockly.Python.definitions_.musicStackString + d + "1"),
            (b =
              b +
              c +
              "Ed.PlayTune('" +
              Blockly.Python.definitions_.musicStackString +
              "z')\n"),
            (b =
              b +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g))
          : (b =
              b +
              c +
              "Ed.PlayTune('" +
              d +
              "1z')\n" +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = ""))
    : (e
        ? ((Blockly.Python.definitions_.musicStackString =
            Blockly.Python.definitions_.musicStackString + d + "1"),
          (b =
            b +
            c +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"))
        : (b =
            b +
            c +
            "Ed.PlayTune('" +
            d +
            "1z')\n" +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"),
      (b += g),
      (Blockly.Python.definitions_.musicStackFlag = !1),
      (Blockly.Python.definitions_.musicStackString = ""));
  return b;
};
Blockly.Python.dropdown_light_sound_play_half = function (a) {
  a = a.getFieldValue("CHOICE");
  return [soundDropDownToNote(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_play_half = function (a) {
  var b = "#Play half note\n";
  Blockly.Python.definitions_.MusicUsed = !0;
  var d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC),
    c = Blockly.Python.definitions_.currentIndent,
    e = Blockly.Python.definitions_.musicStackFlag,
    f = a.nextConnection.targetBlock(),
    g = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (g =
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        c +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  null != f
    ? f.type.includes("light_sound_play_") ||
      "light_sound_rest" == f.type ||
      "light_sound_note_sharp" == f.type
      ? ((Blockly.Python.definitions_.musicStackFlag = !0),
        (Blockly.Python.definitions_.musicStackString =
          Blockly.Python.definitions_.musicStackString + d + "2"),
        (b = "#Play note stacked\n"))
      : (e
          ? ((Blockly.Python.definitions_.musicStackString =
              Blockly.Python.definitions_.musicStackString + d + "2"),
            (b =
              b +
              c +
              "Ed.PlayTune('" +
              Blockly.Python.definitions_.musicStackString +
              "z')\n"),
            (b =
              b +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g))
          : (b =
              b +
              c +
              "Ed.PlayTune('" +
              d +
              "2z')\n" +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = ""))
    : (e
        ? ((Blockly.Python.definitions_.musicStackString =
            Blockly.Python.definitions_.musicStackString + d + "2"),
          (b =
            b +
            c +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"))
        : (b =
            b +
            c +
            "Ed.PlayTune('" +
            d +
            "2z')\n" +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"),
      (b += g),
      (Blockly.Python.definitions_.musicStackFlag = !1),
      (Blockly.Python.definitions_.musicStackString = ""));
  return b;
};
Blockly.Python.dropdown_light_sound_play_quarter = function (a) {
  a = a.getFieldValue("CHOICE");
  return [soundDropDownToNote(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_play_quarter = function (a) {
  var b = "#Play quarter note\n";
  Blockly.Python.definitions_.MusicUsed = !0;
  var d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC),
    c = Blockly.Python.definitions_.currentIndent,
    e = Blockly.Python.definitions_.musicStackFlag,
    f = a.nextConnection.targetBlock(),
    g = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (g =
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        c +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  null != f
    ? f.type.includes("light_sound_play_") ||
      "light_sound_rest" == f.type ||
      "light_sound_note_sharp" == f.type
      ? ((Blockly.Python.definitions_.musicStackFlag = !0),
        (Blockly.Python.definitions_.musicStackString =
          Blockly.Python.definitions_.musicStackString + d + "4"),
        (b = "#Play note stacked\n"))
      : (e
          ? ((Blockly.Python.definitions_.musicStackString =
              Blockly.Python.definitions_.musicStackString + d + "4"),
            (b =
              b +
              c +
              "Ed.PlayTune('" +
              Blockly.Python.definitions_.musicStackString +
              "z')\n"),
            (b =
              b +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g))
          : (b =
              b +
              c +
              "Ed.PlayTune('" +
              d +
              "4z')\n" +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = ""))
    : (e
        ? ((Blockly.Python.definitions_.musicStackString =
            Blockly.Python.definitions_.musicStackString + d + "4"),
          (b =
            b +
            c +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"))
        : (b =
            b +
            c +
            "Ed.PlayTune('" +
            d +
            "4z')\n" +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"),
      (b += g),
      (Blockly.Python.definitions_.musicStackFlag = !1),
      (Blockly.Python.definitions_.musicStackString = ""));
  return b;
};
Blockly.Python.dropdown_light_sound_play_eighth = function (a) {
  a = a.getFieldValue("CHOICE");
  return [soundDropDownToNote(a), Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_play_eighth = function (a) {
  var b = "#Play eighth note\n";
  Blockly.Python.definitions_.MusicUsed = !0;
  var d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC),
    c = Blockly.Python.definitions_.currentIndent,
    e = Blockly.Python.definitions_.musicStackFlag,
    f = a.nextConnection.targetBlock(),
    g = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (g =
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        c +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  null != f
    ? f.type.includes("light_sound_play_") ||
      "light_sound_rest" == f.type ||
      "light_sound_note_sharp" == f.type
      ? ((Blockly.Python.definitions_.musicStackFlag = !0),
        (Blockly.Python.definitions_.musicStackString =
          Blockly.Python.definitions_.musicStackString + d + "8"),
        (b = "#Play note stacked\n"))
      : (e
          ? ((Blockly.Python.definitions_.musicStackString =
              Blockly.Python.definitions_.musicStackString + d + "8"),
            (b =
              b +
              c +
              "Ed.PlayTune('" +
              Blockly.Python.definitions_.musicStackString +
              "z')\n"),
            (b =
              b +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g))
          : (b =
              b +
              c +
              "Ed.PlayTune('" +
              d +
              "8z')\n" +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = ""))
    : (e
        ? ((Blockly.Python.definitions_.musicStackString =
            Blockly.Python.definitions_.musicStackString + d + "8"),
          (b =
            b +
            c +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"))
        : (b =
            b +
            c +
            "Ed.PlayTune('" +
            d +
            "8z')\n" +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"),
      (b += g),
      (Blockly.Python.definitions_.musicStackFlag = !1),
      (Blockly.Python.definitions_.musicStackString = ""));
  return b;
};
Blockly.Python.light_sound_note_sharp = function (a) {
  var b = "";
  Blockly.Python.definitions_.nextNoteSharp = !0;
  var d = Blockly.Python.definitions_.musicStackFlag,
    c = a.nextConnection.targetBlock(),
    e = Blockly.Python.definitions_.currentIndent,
    f = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (f =
        e +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        e +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        e +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  d &&
    (null != c
      ? c.type.includes("light_sound_play_") ||
        "light_sound_rest" == c.type ||
        "light_sound_note_sharp" == c.type
        ? (b = "#Next note sharp\n")
        : ((b =
            b +
            e +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            e +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            e +
            "\tpass\n" +
            f),
          (Blockly.Python.definitions_.musicStackFlag = !1),
          (Blockly.Python.definitions_.musicStackString = ""))
      : ((b =
          b +
          e +
          "Ed.PlayTune('" +
          Blockly.Python.definitions_.musicStackString +
          "z')\n"),
        (b =
          b +
          e +
          "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
          e +
          "\tpass\n" +
          f),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = "")));
  return b;
};
Blockly.Python.dropdown_light_sound_note_tempo = function (a) {
  switch (a.getFieldValue("CHOICE")) {
    case "4":
      var b = "Ed.TEMPO_SLOW";
      break;
    case "2":
      b = "Ed.TEMPO_MEDIUM";
      break;
    case "1":
      b = "Ed.TEMPO_FAST";
  }
  return [b, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_note_tempo = function (a) {
  Blockly.Python.definitions_.MusicUsed = !0;
  a = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC);
  return (
    "#set tempo\n" +
    Blockly.Python.definitions_.currentIndent +
    "Ed.Tempo = " +
    a +
    "\n"
  );
};
Blockly.Python.dropdown_light_sound_rest = function (a) {
  switch (a.getFieldValue("CHOICE")) {
    case "100":
      var b = "1";
      break;
    case "50":
      b = "2";
      break;
    case "25":
      b = "4";
      break;
    case "12":
      b = "8";
  }
  return [b, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.light_sound_rest = function (a) {
  var b = "#Play rest note\n";
  Blockly.Python.definitions_.MusicUsed = !0;
  var d = Blockly.Python.valueToCode(a, "CHOICE", Blockly.Python.ORDER_ATOMIC),
    c = Blockly.Python.definitions_.currentIndent,
    e = Blockly.Python.definitions_.musicStackFlag,
    f = a.nextConnection.targetBlock(),
    g = "";
  Blockly.Python.definitions_.clapUsedEvent &&
    (a.getRootBlock().type.includes("new_event_clap_") ||
      (g =
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, None)\n" +
        c +
        "Ed.TimeWait(150, Ed.TIME_MILLISECONDS)\n" +
        c +
        "Ed.RegisterEventHandler(Ed.EVENT_CLAP_DETECTED, 'if2')\n"));
  null != f
    ? f.type.includes("light_sound_play_") ||
      "light_sound_rest" == f.type ||
      "light_sound_note_sharp" == f.type
      ? ((Blockly.Python.definitions_.musicStackFlag = !0),
        (Blockly.Python.definitions_.musicStackString =
          Blockly.Python.definitions_.musicStackString + "r" + d),
        (b = "#Play note stacked\n"))
      : (e
          ? ((Blockly.Python.definitions_.musicStackString =
              Blockly.Python.definitions_.musicStackString + "r" + d),
            (b =
              b +
              c +
              "Ed.PlayTune('" +
              Blockly.Python.definitions_.musicStackString +
              "z')\n"),
            (b =
              b +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g))
          : (b =
              b +
              c +
              "Ed.PlayTune('r" +
              d +
              "z')\n" +
              c +
              "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
              c +
              "\tpass\n" +
              g),
        (Blockly.Python.definitions_.musicStackFlag = !1),
        (Blockly.Python.definitions_.musicStackString = ""))
    : (e
        ? ((Blockly.Python.definitions_.musicStackString =
            Blockly.Python.definitions_.musicStackString + "r" + d),
          (b =
            b +
            c +
            "Ed.PlayTune('" +
            Blockly.Python.definitions_.musicStackString +
            "z')\n"),
          (b =
            b +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"))
        : (b =
            b +
            c +
            "Ed.PlayTune('r" +
            d +
            "z')\n" +
            c +
            "while Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n" +
            c +
            "\tpass\n"),
      (b += g),
      (Blockly.Python.definitions_.musicStackFlag = !1),
      (Blockly.Python.definitions_.musicStackString = ""));
  return b;
};
Blockly.Python.Math = {};
Blockly.Python.math_angle = function (a) {
  a = parseInt(a.getFieldValue("NUM"));
  isNaN(a) && (a = 0);
  0 > a && (a = 0);
  return [a, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.math_angle_CC = function (a) {
  a = parseInt(a.getFieldValue("NUM"));
  isNaN(a) && (a = 0);
  0 > a && (a = 0);
  return [a, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.math_whole_number = function (a) {
  a = parseInt(a.getFieldValue("NUM"));
  isNaN(a) && (a = 0);
  0 > a && (a = 0);
  return [a, Blockly.Python.ORDER_ATOMIC];
};
Blockly.Python.math_positive_number = function (a) {
  a = parseFloat(a.getFieldValue("NUM"));
  isNaN(a) && (a = 0);
  0 > a && (a = 0);
  return [a, Blockly.Python.ORDER_ATOMIC];
};
